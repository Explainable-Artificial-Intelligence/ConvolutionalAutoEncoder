/**
 * Convolutional Autoencoder
 * WebUI to build, train and tune a Convolutional Autoencoder
 *
 * OpenAPI spec version: 1.0.7
 * Contact: leon.schuetz@student.uni-tuebingen.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
      define(['ApiClient', 'model/ClusterParameters', 'model/Clustering', 'model/CostFunction', 'model/Image', 'model/ImageData', 'model/LearningRate', 'model/ParameterList', 'model/Point2D', 'model/ProcessedImageData', 'model/RandomFunction', 'model/TrainPerformance', 'model/TrainStatus', 'api/BuildApi', 'api/LoadApi', 'api/TrainApi', 'api/TuneApi', 'api/VisualizeApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
      module.exports = factory(require('./ApiClient'), require('./model/ClusterParameters'), require('./model/Clustering'), require('./model/CostFunction'), require('./model/Image'), require('./model/ImageData'), require('./model/LearningRate'), require('./model/ParameterList'), require('./model/Point2D'), require('./model/ProcessedImageData'), require('./model/RandomFunction'), require('./model/TrainPerformance'), require('./model/TrainStatus'), require('./api/BuildApi'), require('./api/LoadApi'), require('./api/TrainApi'), require('./api/TuneApi'), require('./api/VisualizeApi'));
  }
}(function (ApiClient, ClusterParameters, Clustering, CostFunction, Image, ImageData, LearningRate, ParameterList, Point2D, ProcessedImageData, RandomFunction, TrainPerformance, TrainStatus, BuildApi, LoadApi, TrainApi, TuneApi, VisualizeApi) {
  'use strict';

  /**
   * WebUI_to_build_train_and_tune_a_Convolutional_Autoencoder.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var ConvolutionalAutoencoder = require('index'); // See note below*.
   * var xxxSvc = new ConvolutionalAutoencoder.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new ConvolutionalAutoencoder.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new ConvolutionalAutoencoder.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new ConvolutionalAutoencoder.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.7
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ClusterParameters model constructor.
     * @property {module:model/ClusterParameters}
     */
    ClusterParameters: ClusterParameters,
    /**
     * The Clustering model constructor.
     * @property {module:model/Clustering}
     */
    Clustering: Clustering,
    /**
     * The CostFunction model constructor.
     * @property {module:model/CostFunction}
     */
    CostFunction: CostFunction,
      /**
       * The Image model constructor.
       * @property {module:model/Image}
       */
      Image: Image,
    /**
     * The ImageData model constructor.
     * @property {module:model/ImageData}
     */
    ImageData: ImageData,
    /**
     * The LearningRate model constructor.
     * @property {module:model/LearningRate}
     */
    LearningRate: LearningRate,
      /**
       * The ParameterList model constructor.
       * @property {module:model/ParameterList}
       */
      ParameterList: ParameterList,
    /**
     * The Point2D model constructor.
     * @property {module:model/Point2D}
     */
    Point2D: Point2D,
    /**
     * The ProcessedImageData model constructor.
     * @property {module:model/ProcessedImageData}
     */
    ProcessedImageData: ProcessedImageData,
    /**
     * The RandomFunction model constructor.
     * @property {module:model/RandomFunction}
     */
    RandomFunction: RandomFunction,
      /**
       * The TrainPerformance model constructor.
       * @property {module:model/TrainPerformance}
       */
      TrainPerformance: TrainPerformance,
    /**
     * The TrainStatus model constructor.
     * @property {module:model/TrainStatus}
     */
    TrainStatus: TrainStatus,
    /**
     * The BuildApi service constructor.
     * @property {module:api/BuildApi}
     */
    BuildApi: BuildApi,
    /**
     * The LoadApi service constructor.
     * @property {module:api/LoadApi}
     */
    LoadApi: LoadApi,
    /**
     * The TrainApi service constructor.
     * @property {module:api/TrainApi}
     */
    TrainApi: TrainApi,
    /**
     * The TuneApi service constructor.
     * @property {module:api/TuneApi}
     */
    TuneApi: TuneApi,
    /**
     * The VisualizeApi service constructor.
     * @property {module:api/VisualizeApi}
     */
    VisualizeApi: VisualizeApi
  };

  return exports;
}));
