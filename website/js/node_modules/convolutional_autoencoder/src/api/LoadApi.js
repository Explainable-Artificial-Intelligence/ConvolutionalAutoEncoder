/**
 * Convolutional Autoencoder
 * WebUI to build, train and tune a Convolutional Autoencoder
 *
 * OpenAPI spec version: 1.2.0
 * Contact: leon.schuetz@student.uni-tuebingen.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ImageData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ImageData'));
  } else {
    // Browser globals (root is window)
    if (!root.ConvolutionalAutoencoder) {
      root.ConvolutionalAutoencoder = {};
    }
    root.ConvolutionalAutoencoder.LoadApi = factory(root.ConvolutionalAutoencoder.ApiClient, root.ConvolutionalAutoencoder.ImageData);
  }
}(this, function(ApiClient, ImageData) {
  'use strict';

  /**
   * Load service.
   * @module api/LoadApi
   * @version 1.2.0
   */

  /**
   * Constructs a new LoadApi. 
   * @alias module:api/LoadApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


      /**
       * Callback function to receive the result of the getAvailableDataSets operation.
       * @callback module:api/LoadApi~getAvailableDataSetsCallback
       * @param {String} error Error message, if any.
       * @param {Array.<'String'>} data The data returned by the service call.
       * @param {String} response The complete HTTP response.
       */

      /**
       * get available data sets
       * returns a list of available data set files
       * @param {module:api/LoadApi~getAvailableDataSetsCallback} callback The callback function, accepting three arguments: error, data, response
       * data is of type: {@link Array.<'String'>}
       */
      this.getAvailableDataSets = function (callback) {
          var postBody = null;


          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};

          var authNames = [];
          var contentTypes = ['application/json'];
          var accepts = ['application/json'];
          var returnType = ['String'];

          return this.apiClient.callApi(
              '/load/getAvailableDataSets', 'GET',
              pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
              authNames, contentTypes, accepts, returnType, callback
          );
      }

    /**
     * Callback function to receive the result of the getImageBatch operation.
     * @callback module:api/LoadApi~getImageBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the next batch of input/output images
     * images are encoded as png byte strings
     * @param {Object} opts Optional parameters
     * @param {Number} opts.batchSize defines the number of return images (default to 100)
     * @param {String} opts.datasetname name for dataset on the server (default to train_data)
     * @param {String} opts.sortBy defines the sorting of the input images
     * @param {String} opts.filter the values which should be filtered (whitelist)
     * @param {Boolean} opts.output if true returns AE output Images instead of input Images (default to false)
     * @param {module:api/LoadApi~getImageBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageData}
     */
    this.getImageBatch = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'batch_size': opts['batchSize'],
        'datasetname': opts['datasetname'],
        'sort_by': opts['sortBy'],
        'filter': opts['filter'],
          'output': opts['output'],
      };
        var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImageData;

      return this.apiClient.callApi(
        '/load/getImageBatch', 'GET',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageById operation.
     * @callback module:api/LoadApi~getImageByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a single input/output image
     * images are encoded as png byte strings
     * @param {Number} id defines the id of the images
     * @param {Object} opts Optional parameters
     * @param {String} opts.datasetname name for dataset on the server (default to train_data)
     * @param {String} opts.sortBy defines the sorting of the input images
     * @param {String} opts.filter the values which should be filtered (whitelist)
     * @param {Boolean} opts.output if true returns AE output Images instead of input Images (default to false)
     * @param {module:api/LoadApi~getImageByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageData}
     */
    this.getImageById = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageById");
      }


      var pathParams = {
      };
      var queryParams = {
        'id': id,
        'datasetname': opts['datasetname'],
        'sort_by': opts['sortBy'],
        'filter': opts['filter'],
          'output': opts['output'],
      };
        var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImageData;

      return this.apiClient.callApi(
        '/load/getImageById', 'GET',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getImages operation.
     * @callback module:api/LoadApi~getImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a subset of input/output images
     * images are encoded as png byte strings
     * @param {Number} startIdx name for dataset on the server
     * @param {Number} endIdx name for dataset on the server
     * @param {Object} opts Optional parameters
     * @param {String} opts.datasetname name for dataset on the server (default to train_data)
     * @param {String} opts.sortBy defines the sorting of the input images
     * @param {String} opts.filter the values which should be filtered (whitelist)
     * @param {Boolean} opts.output if true returns AE output Images instead of input Images (default to false)
     * @param {module:api/LoadApi~getImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageData}
     */
    this.getImages = function(startIdx, endIdx, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'startIdx' is set
      if (startIdx === undefined || startIdx === null) {
        throw new Error("Missing the required parameter 'startIdx' when calling getImages");
      }

      // verify the required parameter 'endIdx' is set
      if (endIdx === undefined || endIdx === null) {
        throw new Error("Missing the required parameter 'endIdx' when calling getImages");
      }


      var pathParams = {
      };
      var queryParams = {
        'start_idx': startIdx,
        'end_idx': endIdx,
        'datasetname': opts['datasetname'],
        'sort_by': opts['sortBy'],
        'filter': opts['filter'],
          'output': opts['output'],
      };
        var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImageData;

      return this.apiClient.callApi(
        '/load/getImages', 'GET',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

      /**
       * Callback function to receive the result of the getLatentRepresentationById operation.
       * @callback module:api/LoadApi~getLatentRepresentationByIdCallback
       * @param {String} error Error message, if any.
       * @param {module:model/ImageData} data The data returned by the service call.
       * @param {String} response The complete HTTP response.
       */

      /**
       * returns a single latent representation as ()list of) png images
       * images are encoded as png byte strings
       * @param {Number} id defines the id of the images
       * @param {Object} opts Optional parameters
       * @param {String} opts.datasetname name for dataset on the server (default to train_data)
       * @param {module:api/LoadApi~getLatentRepresentationByIdCallback} callback The callback function, accepting three arguments: error, data, response
       * data is of type: {@link module:model/ImageData}
       */
      this.getLatentRepresentationById = function (id, opts, callback) {
          opts = opts || {};
          var postBody = null;

          // verify the required parameter 'id' is set
          if (id === undefined || id === null) {
              throw new Error("Missing the required parameter 'id' when calling getLatentRepresentationById");
          }


          var pathParams = {};
          var queryParams = {
              'id': id,
              'datasetname': opts['datasetname'],
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};

          var authNames = [];
          var contentTypes = ['application/json'];
          var accepts = ['application/json'];
          var returnType = ImageData;

          return this.apiClient.callApi(
              '/load/getLatentRepresentationById', 'GET',
              pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
              authNames, contentTypes, accepts, returnType, callback
          );
      }

      /**
       * Callback function to receive the result of the getLoadedDataSets operation.
       * @callback module:api/LoadApi~getLoadedDataSetsCallback
       * @param {String} error Error message, if any.
       * @param {Array.<'String'>} data The data returned by the service call.
       * @param {String} response The complete HTTP response.
       */

      /**
       * get loaded data sets
       * returns a list of loaded data sets
       * @param {module:api/LoadApi~getLoadedDataSetsCallback} callback The callback function, accepting three arguments: error, data, response
       * data is of type: {@link Array.<'String'>}
       */
      this.getLoadedDataSets = function (callback) {
          var postBody = null;


          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};

          var authNames = [];
          var contentTypes = ['application/json'];
          var accepts = ['application/json'];
          var returnType = ['String'];

          return this.apiClient.callApi(
              '/load/getLoadedDataSets', 'GET',
              pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
              authNames, contentTypes, accepts, returnType, callback
          );
      }

    /**
     * Callback function to receive the result of the getRandomImages operation.
     * @callback module:api/LoadApi~getRandomImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the next batch of input/output images
     * images are encoded as png byte strings
     * @param {Object} opts Optional parameters
     * @param {Number} opts.batchSize defines the number of return images (default to 100)
     * @param {String} opts.datasetname name for dataset on the server (default to train_data)
     * @param {String} opts.sortBy defines the sorting of the input images
     * @param {String} opts.filter the values which should be filtered (whitelist)
     * @param {Boolean} opts.output if true returns AE output Images instead of input Images (default to false)
     * @param {module:api/LoadApi~getRandomImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageData}
     */
    this.getRandomImages = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'batch_size': opts['batchSize'],
        'datasetname': opts['datasetname'],
        'sort_by': opts['sortBy'],
        'filter': opts['filter'],
          'output': opts['output'],
      };
        var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ImageData;

      return this.apiClient.callApi(
        '/load/getRandomImages', 'GET',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loadFile operation.
     * @callback module:api/LoadApi~loadFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load a train/test data file
     * Load a data file in different data formats
     * @param {String} filename 
     * @param {Object} opts Optional parameters
     * @param {String} opts.datasetname name for dataset on the server (default to train_data)
     * @param {Boolean} opts.readLabels true to read labels (default to false)
     * @param {String} opts.dataType determines the data format of the input file (default to auto)
     * @param {module:api/LoadApi~loadFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.loadFile = function(filename, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling loadFile");
      }


      var pathParams = {
      };
      var queryParams = {
        'filename': filename,
        'datasetname': opts['datasetname'],
        'read_labels': opts['readLabels'],
          'data_type': opts['dataType'],
      };
        var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/load/loadFile', 'POST',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetAllBatchIndices operation.
     * @callback module:api/LoadApi~resetAllBatchIndicesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * resets all batch indices of all image sets
     * resets all batch indices of all image sets
     * @param {module:api/LoadApi~resetAllBatchIndicesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetAllBatchIndices = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
        var collectionQueryParams = {};
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/load/resetAllBatchIndices', 'POST',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetBatchIndex operation.
     * @callback module:api/LoadApi~resetBatchIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * resets the batch index of the image set
     * resets the batch index of the image set
     * @param {Object} opts Optional parameters
     * @param {String} opts.datasetName name for dataset on the server (default to train_data)
     * @param {Boolean} opts.output reset output image batch index instead of input images (default to false)
     * @param {module:api/LoadApi~resetBatchIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetBatchIndex = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'dataset_name': opts['datasetName'],
          'output': opts['output'],
      };
        var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/load/resetBatchIndex', 'POST',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

      /**
       * Callback function to receive the result of the uploadFile operation.
       * @callback module:api/LoadApi~uploadFileCallback
       * @param {String} error Error message, if any.
       * @param data This operation does not return a value.
       * @param {String} response The complete HTTP response.
       */

      /**
       * uploads a data file
       * Load a data file in different data formats
       * @param {File} upfile The file to upload.
       * @param {module:api/LoadApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
       */
      this.uploadFile = function (upfile, callback) {
          var postBody = null;

          // verify the required parameter 'upfile' is set
          if (upfile === undefined || upfile === null) {
              throw new Error("Missing the required parameter 'upfile' when calling uploadFile");
          }


          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {
              'upfile': upfile
          };

          var authNames = [];
          var contentTypes = ['multipart/form-data'];
          var accepts = [];
          var returnType = null;

          return this.apiClient.callApi(
              '/load/uploadFile', 'POST',
              pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
              authNames, contentTypes, accepts, returnType, callback
          );
      }
  };

  return exports;
}));
