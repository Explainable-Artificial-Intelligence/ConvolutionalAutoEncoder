/**
 * Convolutional Autoencoder
 * WebUI to build, train and tune a Convolutional Autoencoder
 *
 * OpenAPI spec version: 1.2.0
 * Contact: leon.schuetz@student.uni-tuebingen.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ParameterList', 'model/ProcessedImageData', 'model/TrainPerformance', 'model/TrainStatus'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ParameterList'), require('../model/ProcessedImageData'), require('../model/TrainPerformance'), require('../model/TrainStatus'));
  } else {
    // Browser globals (root is window)
    if (!root.ConvolutionalAutoencoder) {
      root.ConvolutionalAutoencoder = {};
    }
    root.ConvolutionalAutoencoder.TuneApi = factory(root.ConvolutionalAutoencoder.ApiClient, root.ConvolutionalAutoencoder.ParameterList, root.ConvolutionalAutoencoder.ProcessedImageData, root.ConvolutionalAutoencoder.TrainPerformance, root.ConvolutionalAutoencoder.TrainStatus);
  }
}(this, function(ApiClient, ParameterList, ProcessedImageData, TrainPerformance, TrainStatus) {
  'use strict';

  /**
   * Tune service.
   * @module api/TuneApi
   * @version 1.2.0
   */

  /**
   * Constructs a new TuneApi. 
   * @alias module:api/TuneApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


      /**
       * Callback function to receive the result of the applySpecificTuningAsDefaultModel operation.
       * @callback module:api/TuneApi~applySpecificTuningAsDefaultModelCallback
       * @param {String} error Error message, if any.
       * @param data This operation does not return a value.
       * @param {String} response The complete HTTP response.
       */

      /**
       * sets a given tuned model as default model
       * sets a given tuned model as default model
       * @param {String} modelId model id of the tuned model
       * @param {module:api/TuneApi~applySpecificTuningAsDefaultModelCallback} callback The callback function, accepting three arguments: error, data, response
       */
      this.applySpecificTuningAsDefaultModel = function (modelId, callback) {
          var postBody = null;

          // verify the required parameter 'modelId' is set
          if (modelId === undefined || modelId === null) {
              throw new Error("Missing the required parameter 'modelId' when calling applySpecificTuningAsDefaultModel");
          }


          var pathParams = {};
          var queryParams = {
              'modelId': modelId,
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};

          var authNames = [];
          var contentTypes = ['application/json'];
          var accepts = ['application/json'];
          var returnType = null;

          return this.apiClient.callApi(
              '/tune/applySpecificTuningAsDefaultModel', 'POST',
              pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
              authNames, contentTypes, accepts, returnType, callback
          );
      }

      /**
       * Callback function to receive the result of the buildGridSearchANN operation.
       * @callback module:api/TuneApi~buildGridSearchANNCallback
       * @param {String} error Error message, if any.
       * @param data This operation does not return a value.
       * @param {String} response The complete HTTP response.
       */

      /**
       * passes all learning and ANN parameters to the server
       * Includes learning parameters and ANN topology as lists
       * @param {module:model/ParameterList} inputParameterLists object with all tunable parameter lists
       * @param {Object} opts Optional parameters
       * @param {Boolean} opts.deletePreviousModels if true delete all previous tuned models (default to false)
       * @param {module:api/TuneApi~buildGridSearchANNCallback} callback The callback function, accepting three arguments: error, data, response
       */
      this.buildGridSearchANN = function (inputParameterLists, opts, callback) {
          opts = opts || {};
          var postBody = inputParameterLists;

          // verify the required parameter 'inputParameterLists' is set
          if (inputParameterLists === undefined || inputParameterLists === null) {
              throw new Error("Missing the required parameter 'inputParameterLists' when calling buildGridSearchANN");
          }


          var pathParams = {};
          var queryParams = {
              'deletePreviousModels': opts['deletePreviousModels'],
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};

          var authNames = [];
          var contentTypes = ['application/json'];
          var accepts = ['application/json'];
          var returnType = null;

          return this.apiClient.callApi(
              '/tune/buildGridSearchANN', 'POST',
              pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
              authNames, contentTypes, accepts, returnType, callback
          );
      }

    /**
     * Callback function to receive the result of the controlTuning operation.
     * @callback module:api/TuneApi~controlTuningCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * starts, pauses and stops the tuning
     * uses a string enum
     * @param {module:model/TrainStatus} trainStatus new status for training
     * @param {module:api/TuneApi~controlTuningCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.controlTuning = function(trainStatus, callback) {
      var postBody = trainStatus;

      // verify the required parameter 'trainStatus' is set
      if (trainStatus === undefined || trainStatus === null) {
        throw new Error("Missing the required parameter 'trainStatus' when calling controlTuning");
      }


      var pathParams = {
      };
      var queryParams = {
      };
        var collectionQueryParams = {};
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
          '/tune/controlTuning', 'POST',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProcessedImageDataOfCurrentTuning operation.
     * @callback module:api/TuneApi~getProcessedImageDataOfCurrentTuningCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProcessedImageData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a subset of the current train images and the corresponding latent representation and output
     * 
     * @param {Number} setSize size of the image subset
     * @param {module:api/TuneApi~getProcessedImageDataOfCurrentTuningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProcessedImageData}
     */
    this.getProcessedImageDataOfCurrentTuning = function(setSize, callback) {
      var postBody = null;

      // verify the required parameter 'setSize' is set
      if (setSize === undefined || setSize === null) {
        throw new Error("Missing the required parameter 'setSize' when calling getProcessedImageDataOfCurrentTuning");
      }


      var pathParams = {
      };
      var queryParams = {
          'setSize': setSize,
      };
        var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProcessedImageData;

      return this.apiClient.callApi(
        '/tune/getProcessedImageDataOfCurrentTuning', 'GET',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

      /**
       * Callback function to receive the result of the getProcessedImageDataOfSpecificTuning operation.
       * @callback module:api/TuneApi~getProcessedImageDataOfSpecificTuningCallback
       * @param {String} error Error message, if any.
       * @param {module:model/ProcessedImageData} data The data returned by the service call.
       * @param {String} response The complete HTTP response.
       */

      /**
       * returns a subset of the current train images and the corresponding latent representation and output
       *
       * @param {Number} setSize size of the image subset
       * @param {String} modelId model id of the exspected parameter set
       * @param {module:api/TuneApi~getProcessedImageDataOfSpecificTuningCallback} callback The callback function, accepting three arguments: error, data, response
       * data is of type: {@link module:model/ProcessedImageData}
       */
      this.getProcessedImageDataOfSpecificTuning = function (setSize, modelId, callback) {
          var postBody = null;

          // verify the required parameter 'setSize' is set
          if (setSize === undefined || setSize === null) {
              throw new Error("Missing the required parameter 'setSize' when calling getProcessedImageDataOfSpecificTuning");
          }

          // verify the required parameter 'modelId' is set
          if (modelId === undefined || modelId === null) {
              throw new Error("Missing the required parameter 'modelId' when calling getProcessedImageDataOfSpecificTuning");
          }


          var pathParams = {};
          var queryParams = {
              'setSize': setSize,
              'modelId': modelId,
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};

          var authNames = [];
          var contentTypes = ['application/json'];
          var accepts = ['application/json'];
          var returnType = ProcessedImageData;

          return this.apiClient.callApi(
              '/tune/getProcessedImageDataOfSpecificTuning', 'GET',
              pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
              authNames, contentTypes, accepts, returnType, callback
          );
      }

    /**
     * Callback function to receive the result of the getTrainPerformanceOfCurrentTuning operation.
     * @callback module:api/TuneApi~getTrainPerformanceOfCurrentTuningCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TrainPerformance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the next batch of scalar train variables
     * as list of dicts
     * @param {module:api/TuneApi~getTrainPerformanceOfCurrentTuningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TrainPerformance}
     */
    this.getTrainPerformanceOfCurrentTuning = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
        var collectionQueryParams = {};
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TrainPerformance;

      return this.apiClient.callApi(
        '/tune/getTrainPerformanceOfCurrentTuning', 'GET',
          pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
          authNames, contentTypes, accepts, returnType, callback
      );
    }

      /**
       * Callback function to receive the result of the getTrainPerformanceOfSpecificTuning operation.
       * @callback module:api/TuneApi~getTrainPerformanceOfSpecificTuningCallback
       * @param {String} error Error message, if any.
       * @param {module:model/TrainPerformance} data The data returned by the service call.
       * @param {String} response The complete HTTP response.
       */

      /**
       * returns the complete set of scalar train variables to a given model
       * as list of dicts
       * @param {String} modelId model id of the exspected parameter set
       * @param {module:api/TuneApi~getTrainPerformanceOfSpecificTuningCallback} callback The callback function, accepting three arguments: error, data, response
       * data is of type: {@link module:model/TrainPerformance}
       */
      this.getTrainPerformanceOfSpecificTuning = function (modelId, callback) {
          var postBody = null;

          // verify the required parameter 'modelId' is set
          if (modelId === undefined || modelId === null) {
              throw new Error("Missing the required parameter 'modelId' when calling getTrainPerformanceOfSpecificTuning");
          }


          var pathParams = {};
          var queryParams = {
              'modelId': modelId,
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};

          var authNames = [];
          var contentTypes = ['application/json'];
          var accepts = ['application/json'];
          var returnType = TrainPerformance;

          return this.apiClient.callApi(
              '/tune/getTrainPerformanceOfSpecificTuning', 'GET',
              pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
              authNames, contentTypes, accepts, returnType, callback
          );
      }

      /**
       * Callback function to receive the result of the getTuneModelIds operation.
       * @callback module:api/TuneApi~getTuneModelIdsCallback
       * @param {String} error Error message, if any.
       * @param {Array.<'String'>} data The data returned by the service call.
       * @param {String} response The complete HTTP response.
       */

      /**
       * returns a list of all tuned model ids
       * returns a list of all tuned model ids
       * @param {module:api/TuneApi~getTuneModelIdsCallback} callback The callback function, accepting three arguments: error, data, response
       * data is of type: {@link Array.<'String'>}
       */
      this.getTuneModelIds = function (callback) {
          var postBody = null;


          var pathParams = {};
          var queryParams = {};
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};

          var authNames = [];
          var contentTypes = ['application/json'];
          var accepts = ['application/json'];
          var returnType = ['String'];

          return this.apiClient.callApi(
              '/tune/getTuneModelIds', 'GET',
              pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
              authNames, contentTypes, accepts, returnType, callback
          );
      }

      /**
       * Callback function to receive the result of the getTuneParameter operation.
       * @callback module:api/TuneApi~getTuneParameterCallback
       * @param {String} error Error message, if any.
       * @param {module:model/ParameterList} data The data returned by the service call.
       * @param {String} response The complete HTTP response.
       */

      /**
       * returns the parameter set of the ANN with the given model id
       * returns a object of type ParameterList
       * @param {String} modelId model id of the exspected parameter set
       * @param {module:api/TuneApi~getTuneParameterCallback} callback The callback function, accepting three arguments: error, data, response
       * data is of type: {@link module:model/ParameterList}
       */
      this.getTuneParameter = function (modelId, callback) {
          var postBody = null;

          // verify the required parameter 'modelId' is set
          if (modelId === undefined || modelId === null) {
              throw new Error("Missing the required parameter 'modelId' when calling getTuneParameter");
          }


          var pathParams = {};
          var queryParams = {
              'modelId': modelId,
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};

          var authNames = [];
          var contentTypes = ['application/json'];
          var accepts = ['application/json'];
          var returnType = ParameterList;

          return this.apiClient.callApi(
              '/tune/getTuneParameter', 'GET',
              pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
              authNames, contentTypes, accepts, returnType, callback
          );
      }

      /**
       * Callback function to receive the result of the getTunedModelAsZip operation.
       * @callback module:api/TuneApi~getTunedModelAsZipCallback
       * @param {String} error Error message, if any.
       * @param {File} data The data returned by the service call.
       * @param {String} response The complete HTTP response.
       */

      /**
       * returns a zip file with the pre trained model as runable python script
       *
       * @param {String} modelId model id of the tuned model
       * @param {module:api/TuneApi~getTunedModelAsZipCallback} callback The callback function, accepting three arguments: error, data, response
       * data is of type: {@link File}
       */
      this.getTunedModelAsZip = function (modelId, callback) {
          var postBody = null;

          // verify the required parameter 'modelId' is set
          if (modelId === undefined || modelId === null) {
              throw new Error("Missing the required parameter 'modelId' when calling getTunedModelAsZip");
          }


          var pathParams = {};
          var queryParams = {
              'modelId': modelId,
          };
          var collectionQueryParams = {};
          var headerParams = {};
          var formParams = {};

          var authNames = [];
          var contentTypes = ['application/json'];
          var accepts = ['multipart/form-data'];
          var returnType = File;

          return this.apiClient.callApi(
              '/tune/getTunedModelAsZip', 'GET',
              pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
              authNames, contentTypes, accepts, returnType, callback
          );
      }
  };

  return exports;
}));
