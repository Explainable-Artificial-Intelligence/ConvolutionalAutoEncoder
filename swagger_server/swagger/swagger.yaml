---
swagger: "2.0"
info:
  description: "WebUI to build, train and tune a Convolutional Autoencoder"
  version: "1.0.5"
  title: "Convolutional Autoencoder"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "leon.schuetz@student.uni-tuebingen.de"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v2"
tags:
- name: "load"
  description: "All methods corresponding to the input data"
- name: "build"
  description: "All methods corresponding to the learning parameters"
- name: "train"
  description: "All methods corresponding to the CAE training"
- name: "visualize"
  description: "All methods corresponding to the CAE visualisation"
- name: "tune"
  description: "All methods corresponding to the CAE parameter tuning"
schemes:
- "http"
paths:
  /load/loadFile:
    post:
      tags:
      - "load"
      summary: "Load a train/test data file"
      description: "Load a data file in different data formats"
      operationId: "load_file"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "filename"
        in: "query"
        required: true
        type: "string"
        format: "string"
      - name: "datasetname"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        format: "string"
      - name: "read_labels"
        in: "query"
        description: "true to read labels"
        required: false
        type: "boolean"
      - name: "data_type"
        in: "query"
        description: "determines the data format of the input file"
        required: false
        type: "string"
        format: "string"
      responses:
        200:
          description: "file successful loaded"
        404:
          description: "File not found"
        415:
          description: "File parsing error"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/getImages:
    get:
      tags:
      - "load"
      summary: "returns a subset of input/output images"
      description: "images are encoded as png byte strings"
      operationId: "get_images"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "start_idx"
        in: "query"
        description: "name for dataset on the server"
        required: true
        type: "integer"
        format: "int32"
      - name: "end_idx"
        in: "query"
        description: "name for dataset on the server"
        required: true
        type: "integer"
        format: "int32"
      - name: "datasetname"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        format: "string"
      - name: "sort_by"
        in: "query"
        description: "defines the sorting of the input images"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "the values which should be filtered (whitelist)"
        required: false
        type: "string"
      - name: "output"
        in: "query"
        description: "if true returns AE output Images instead of input Images"
        required: false
        type: "boolean"
      responses:
        200:
          description: "Images successfully returned"
          schema:
            $ref: "#/definitions/ImageData"
        404:
          description: "No data found"
        415:
          description: "Index out of bounds"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/getImageBatch:
    get:
      tags:
      - "load"
      summary: "returns the next batch of input/output images"
      description: "images are encoded as png byte strings"
      operationId: "get_image_batch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "batch_size"
        in: "query"
        description: "defines the number of return images"
        required: false
        type: "integer"
        format: "int32"
      - name: "datasetname"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        format: "string"
      - name: "sort_by"
        in: "query"
        description: "defines the sorting of the input images"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "the values which should be filtered (whitelist)"
        required: false
        type: "string"
      - name: "output"
        in: "query"
        description: "if true returns AE output Images instead of input Images"
        required: false
        type: "boolean"
      responses:
        200:
          description: "Images successfully returned"
          schema:
            $ref: "#/definitions/ImageData"
        404:
          description: "No data found"
        415:
          description: "Index out of bounds"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/getRandomImages:
    get:
      tags:
      - "load"
      summary: "returns the next batch of input/output images"
      description: "images are encoded as png byte strings"
      operationId: "get_random_images"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "batch_size"
        in: "query"
        description: "defines the number of return images"
        required: false
        type: "integer"
        format: "int32"
      - name: "datasetname"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        format: "string"
      - name: "sort_by"
        in: "query"
        description: "defines the sorting of the input images"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "the values which should be filtered (whitelist)"
        required: false
        type: "string"
      - name: "output"
        in: "query"
        description: "if true returns AE output Images instead of input Images"
        required: false
        type: "boolean"
      responses:
        200:
          description: "Images successfully returned"
          schema:
            $ref: "#/definitions/ImageData"
        404:
          description: "No data found"
        415:
          description: "Index out of bounds"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/getImageById:
    get:
      tags:
      - "load"
      summary: "returns a single input/output image"
      description: "images are encoded as png byte strings"
      operationId: "get_image_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "defines the id of the images"
        required: false
        type: "integer"
        format: "int32"
      - name: "datasetname"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        format: "string"
      - name: "sort_by"
        in: "query"
        description: "defines the sorting of the input images"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "the values which should be filtered (whitelist)"
        required: false
        type: "string"
      - name: "output"
        in: "query"
        description: "if true returns AE output Images instead of input Images"
        required: false
        type: "boolean"
      responses:
        200:
          description: "Images successfully returned"
          schema:
            $ref: "#/definitions/ImageData"
        404:
          description: "No data found"
        415:
          description: "Index out of bounds"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /build/buildANN:
    post:
      tags:
      - "build"
      summary: "passes all learning and ANN parameters to the server"
      description: "Includes learning parameters and ANN topology"
      operationId: "build_ann"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "inputParameters"
        description: "object with all tunable parameters"
        required: true
        schema:
          $ref: "#/definitions/ParameterList"
      responses:
        202:
          description: "Parameters successfully commited"
        415:
          description: "File parsing error"
      x-swagger-router-controller: "swagger_server.controllers.build_controller"
  /train/controlTraining:
    put:
      tags:
      - "train"
      summary: "starts, pauses and stops the training"
      description: "uses a string enum"
      operationId: "control_training"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "trainStatus"
        description: "new status for training"
        required: true
        schema:
          $ref: "#/definitions/TrainStatus"
      responses:
        200:
          description: "Train status updated"
      x-swagger-router-controller: "swagger_server.controllers.train_controller"
  /train/getProcessedImageData:
    get:
      tags:
      - "train"
      summary: "returns a subset of the current train images and the corresponding\
        \ latent representation and output"
      description: ""
      operationId: "get_processed_image_data"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "setSize"
        in: "query"
        description: "size of the image subset"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Train images updated"
          schema:
            $ref: "#/definitions/ProcessedImageData"
      x-swagger-router-controller: "swagger_server.controllers.train_controller"
  /train/getTrainPerformance:
    get:
      tags:
      - "train"
      summary: "returns the next batch of scalar train variables"
      description: "as list of dicts"
      operationId: "get_train_performance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Train status recieved"
          schema:
            $ref: "#/definitions/TrainPerformance"
      x-swagger-router-controller: "swagger_server.controllers.train_controller"
  /visualize/getHiddenLayerLatentClustering:
    get:
      tags:
      - "visualize"
      summary: "returns the clustering of the latent representation of a hidden layer"
      description: ""
      operationId: "get_hidden_layer_latent_clustering"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "algorithm"
        in: "query"
        description: "determines the clutering algorithm"
        required: false
        type: "string"
      - name: "dimension_reduction"
        in: "query"
        description: "determines the algorithm for dim reduction"
        required: false
        type: "string"
      - in: "body"
        name: "cluster_parameters"
        description: "determines the clutering parameters"
        required: false
        schema:
          $ref: "#/definitions/ClusterParameters"
      - name: "layer"
        in: "query"
        description: "determines the hidden layer"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Operation successful"
          schema:
            $ref: "#/definitions/Clustering"
      x-swagger-router-controller: "swagger_server.controllers.visualize_controller"
  /visualize/generateImageFromSinglePoint:
    get:
      tags:
      - "visualize"
      summary: "generates the AE output from a given point of the sample distribution"
      description: ""
      operationId: "generate_image_from_single_point"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "point_2D"
        description: "2D Point of the sample distribution"
        required: true
        schema:
          $ref: "#/definitions/Point2D"
      responses:
        200:
          description: "Operation successful"
          schema:
            $ref: "#/definitions/Image"
      x-swagger-router-controller: "swagger_server.controllers.visualize_controller"
  /tune/buildGridSearchANN:
    post:
      tags:
      - "tune"
      summary: "passes all learning and ANN parameters to the server"
      description: "Includes learning parameters and ANN topology as lists"
      operationId: "pass_ann_parameter_lists"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "inputParameterLists"
        description: "object with all tunable parameter lists"
        required: true
        schema:
          $ref: "#/definitions/ParameterList"
      responses:
        202:
          description: "Parameters successfully commited"
        415:
          description: "File parsing error"
      x-swagger-router-controller: "swagger_server.controllers.tune_controller"
  /tune/controlTuning:
    put:
      tags:
      - "tune"
      summary: "starts, pauses and stops the tuning"
      description: ""
      operationId: "control_tuning"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "trainStatus"
        description: "new status for training"
        required: true
        schema:
          $ref: "#/definitions/TrainStatus"
      responses:
        200:
          description: "Train status updated"
      x-swagger-router-controller: "swagger_server.controllers.tune_controller"
definitions:
  ImageData:
    type: "object"
    properties:
      numImages:
        type: "integer"
        format: "int64"
      resX:
        type: "integer"
        format: "int32"
      resY:
        type: "integer"
        format: "int32"
      images:
        type: "array"
        items:
          $ref: "#/definitions/Image"
  ClusterParameters:
    type: "object"
    properties:
      n_clusters:
        type: "integer"
        format: "int32"
        example: 10
      init:
        type: "string"
        example: "k-means++"
      n_init:
        type: "integer"
        format: "int32"
        example: 10
      max_iter:
        type: "integer"
        format: "int32"
        example: 300
      tol:
        type: "number"
        format: "float"
        example: 1.0E-4
      precompute_distances:
        type: "string"
        example: "auto"
      verbose:
        type: "integer"
        format: "int32"
        example: 0
      random_state:
        type: "integer"
        format: "int32"
        example: "undefined"
      copy_x:
        type: "boolean"
        example: true
      n_jobs:
        type: "integer"
        format: "int32"
        example: -1
      algorithm:
        type: "string"
        example: "auto"
  Clustering:
    type: "object"
    properties:
      minX:
        type: "number"
        format: "float"
      maxX:
        type: "number"
        format: "float"
      minY:
        type: "number"
        format: "float"
      maxY:
        type: "number"
        format: "float"
      nClusters:
        type: "integer"
        format: "int32"
      points:
        type: "array"
        items:
          $ref: "#/definitions/Point2D"
  Point2D:
    type: "object"
    properties:
      x:
        type: "number"
        format: "float"
      y:
        type: "number"
        format: "float"
      cluster:
        type: "integer"
        format: "int32"
  TrainStatus:
    type: "string"
    example: "\\\"start\\\""
    enum:
    - "start"
    - "pause"
    - "stop"
    - "resume"
  Image:
    type: "object"
    properties:
      bytestring:
        type: "string"
      id:
        type: "integer"
        format: "int32"
  ParameterList:
    type: "object"
    properties:
      input_shape:
        type: "array"
        example:
        - - -1
          - 28
          - 28
          - 1
        items:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      number_of_stacks:
        type: "array"
        example:
        - - 12
          - 8
          - 8
          - 4
        items:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      filter_sizes:
        type: "array"
        example:
        - - 5
          - 5
          - 3
          - 3
        items:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      mirror_weights:
        type: "array"
        example:
        - false
        items:
          type: "boolean"
      activation_function:
        type: "array"
        example:
        - "relu"
        items:
          type: "string"
      batch_size:
        type: "array"
        example:
        - 100
        items:
          type: "integer"
          format: "int32"
      n_epochs:
        type: "array"
        example:
        - 50
        items:
          type: "integer"
          format: "int32"
      use_tensorboard:
        type: "boolean"
        example: true
      verbose:
        type: "boolean"
        example: true
      learning_rate_function:
        type: "array"
        example:
        - "static"
        items:
          type: "string"
      lr_initial_learning_rate:
        type: "array"
        example:
        - 0.01
        items:
          type: "number"
          format: "double"
      lr_decay_steps:
        type: "array"
        example:
        - 1000
        items:
          type: "integer"
          format: "int32"
      lr_decay_rate:
        type: "array"
        example:
        - 0.9
        items:
          type: "number"
          format: "double"
      lr_staircase:
        type: "array"
        example:
        - false
        items:
          type: "boolean"
      lr_boundaries:
        type: "array"
        example:
        - - 10000
          - 20000
        items:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      lr_values:
        type: "array"
        example:
        - - 1
          - 0.5
          - 0.1
        items:
          type: "array"
          items:
            type: "number"
            format: "double"
      lr_end_learning_rate:
        type: "array"
        example:
        - 1.0E-4
        items:
          type: "number"
          format: "double"
      lr_power:
        type: "array"
        example:
        - 1
        items:
          type: "number"
          format: "double"
      lr_cycle:
        type: "array"
        example:
        - false
        items:
          type: "boolean"
      opimizer:
        type: "array"
        example:
        - "AdamOptimizer"
        items:
          type: "string"
      momentum:
        type: "array"
        example:
        - 0.9
        items:
          type: "number"
          format: "double"
      random_function_for_weights:
        type: "array"
        example:
        - "uniform"
        items:
          type: "string"
      rw_alpha:
        type: "array"
        example:
        - 0.5
        items:
          type: "number"
          format: "double"
      rw_beta:
        type: "array"
        example:
        - 1
        items:
          type: "number"
          format: "double"
      rw_mean:
        type: "array"
        example:
        - 0
        items:
          type: "number"
          format: "double"
      rw_stddev:
        type: "array"
        example:
        - 1
        items:
          type: "number"
          format: "double"
      rw_lam:
        type: "array"
        example:
        - 0.5
        items:
          type: "number"
          format: "double"
      rw_minval:
        type: "array"
        example:
        - 0
        items:
          type: "number"
          format: "double"
      rw_maxval:
        type: "array"
        example:
        - 1
        items:
          type: "number"
          format: "double"
      rw_seed:
        type: "array"
        example:
        - -1
        items:
          type: "integer"
          format: "int32"
      random_function_for_biases:
        type: "array"
        example:
        - "zeros"
        items:
          type: "string"
      rb_alpha:
        type: "array"
        example:
        - 0.5
        items:
          type: "number"
          format: "double"
      rb_beta:
        type: "array"
        example:
        - 1
        items:
          type: "number"
          format: "double"
      rb_mean:
        type: "array"
        example:
        - 0
        items:
          type: "number"
          format: "double"
      rb_stddev:
        type: "array"
        example:
        - 1
        items:
          type: "number"
          format: "double"
      rb_lam:
        type: "array"
        example:
        - 0.5
        items:
          type: "number"
          format: "double"
      rb_minval:
        type: "array"
        example:
        - 0
        items:
          type: "number"
          format: "double"
      rb_maxval:
        type: "array"
        example:
        - 1
        items:
          type: "number"
          format: "double"
      rb_seed:
        type: "array"
        example:
        - -1
        items:
          type: "integer"
          format: "int32"
      session_saver_path:
        type: "string"
        example: "./save/"
      load_prev_session:
        type: "boolean"
        example: false
      session_save_duration:
        type: "array"
        example:
        - 5
        items:
          type: "integer"
          format: "int32"
      num_test_pictures:
        type: "array"
        example:
        - 100
        items:
          type: "integer"
          format: "int32"
  ProcessedImageData:
    type: "object"
    properties:
      inputLayer:
        type: "array"
        items:
          $ref: "#/definitions/Image"
      latentLayer:
        type: "array"
        items:
          $ref: "#/definitions/Image"
      outputLayer:
        type: "array"
        items:
          $ref: "#/definitions/Image"
  TrainPerformance:
    type: "object"
    properties:
      cost:
        type: "array"
        items:
          type: "number"
          format: "double"
      currentLearningRate:
        type: "array"
        items:
          type: "number"
          format: "double"
