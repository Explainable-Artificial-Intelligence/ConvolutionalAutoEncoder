# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ParameterSet(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, input_shape: List[int]=None, number_of_stacks: List[int]=None, filter_sizes: List[int]=None, mirror_weights: bool=None, activation_function: str=None, batch_size: int=None, n_epochs: int=None, use_tensorboard: bool=None, verbose: bool=None, learning_rate_function: str=None, lr_initial_learning_rate: float=None, lr_decay_steps: int=None, lr_decay_rate: float=None, lr_staircase: bool=None, lr_boundaries: List[int]=None, lr_values: List[float]=None, lr_end_learning_rate: float=None, lr_power: float=None, lr_cycle: bool=None, opimizer: str=None, momentum: float=None, random_function_for_weights: str=None, rw_alpha: float=None, rw_beta: float=None, rw_mean: float=None, rw_stddev: float=None, rw_lam: float=None, rw_minval: float=None, rw_maxval: float=None, rw_seed: int=None, random_function_for_biases: str=None, rb_alpha: float=None, rb_beta: float=None, rb_mean: float=None, rb_stddev: float=None, rb_lam: float=None, rb_minval: float=None, rb_maxval: float=None, rb_seed: int=None, session_saver_path: str=None, load_prev_session: bool=None):
        """
        ParameterSet - a model defined in Swagger

        :param input_shape: The input_shape of this ParameterSet.
        :type input_shape: List[int]
        :param number_of_stacks: The number_of_stacks of this ParameterSet.
        :type number_of_stacks: List[int]
        :param filter_sizes: The filter_sizes of this ParameterSet.
        :type filter_sizes: List[int]
        :param mirror_weights: The mirror_weights of this ParameterSet.
        :type mirror_weights: bool
        :param activation_function: The activation_function of this ParameterSet.
        :type activation_function: str
        :param batch_size: The batch_size of this ParameterSet.
        :type batch_size: int
        :param n_epochs: The n_epochs of this ParameterSet.
        :type n_epochs: int
        :param use_tensorboard: The use_tensorboard of this ParameterSet.
        :type use_tensorboard: bool
        :param verbose: The verbose of this ParameterSet.
        :type verbose: bool
        :param learning_rate_function: The learning_rate_function of this ParameterSet.
        :type learning_rate_function: str
        :param lr_initial_learning_rate: The lr_initial_learning_rate of this ParameterSet.
        :type lr_initial_learning_rate: float
        :param lr_decay_steps: The lr_decay_steps of this ParameterSet.
        :type lr_decay_steps: int
        :param lr_decay_rate: The lr_decay_rate of this ParameterSet.
        :type lr_decay_rate: float
        :param lr_staircase: The lr_staircase of this ParameterSet.
        :type lr_staircase: bool
        :param lr_boundaries: The lr_boundaries of this ParameterSet.
        :type lr_boundaries: List[int]
        :param lr_values: The lr_values of this ParameterSet.
        :type lr_values: List[float]
        :param lr_end_learning_rate: The lr_end_learning_rate of this ParameterSet.
        :type lr_end_learning_rate: float
        :param lr_power: The lr_power of this ParameterSet.
        :type lr_power: float
        :param lr_cycle: The lr_cycle of this ParameterSet.
        :type lr_cycle: bool
        :param opimizer: The opimizer of this ParameterSet.
        :type opimizer: str
        :param momentum: The momentum of this ParameterSet.
        :type momentum: float
        :param random_function_for_weights: The random_function_for_weights of this ParameterSet.
        :type random_function_for_weights: str
        :param rw_alpha: The rw_alpha of this ParameterSet.
        :type rw_alpha: float
        :param rw_beta: The rw_beta of this ParameterSet.
        :type rw_beta: float
        :param rw_mean: The rw_mean of this ParameterSet.
        :type rw_mean: float
        :param rw_stddev: The rw_stddev of this ParameterSet.
        :type rw_stddev: float
        :param rw_lam: The rw_lam of this ParameterSet.
        :type rw_lam: float
        :param rw_minval: The rw_minval of this ParameterSet.
        :type rw_minval: float
        :param rw_maxval: The rw_maxval of this ParameterSet.
        :type rw_maxval: float
        :param rw_seed: The rw_seed of this ParameterSet.
        :type rw_seed: int
        :param random_function_for_biases: The random_function_for_biases of this ParameterSet.
        :type random_function_for_biases: str
        :param rb_alpha: The rb_alpha of this ParameterSet.
        :type rb_alpha: float
        :param rb_beta: The rb_beta of this ParameterSet.
        :type rb_beta: float
        :param rb_mean: The rb_mean of this ParameterSet.
        :type rb_mean: float
        :param rb_stddev: The rb_stddev of this ParameterSet.
        :type rb_stddev: float
        :param rb_lam: The rb_lam of this ParameterSet.
        :type rb_lam: float
        :param rb_minval: The rb_minval of this ParameterSet.
        :type rb_minval: float
        :param rb_maxval: The rb_maxval of this ParameterSet.
        :type rb_maxval: float
        :param rb_seed: The rb_seed of this ParameterSet.
        :type rb_seed: int
        :param session_saver_path: The session_saver_path of this ParameterSet.
        :type session_saver_path: str
        :param load_prev_session: The load_prev_session of this ParameterSet.
        :type load_prev_session: bool
        """
        self.swagger_types = {
            'input_shape': List[int],
            'number_of_stacks': List[int],
            'filter_sizes': List[int],
            'mirror_weights': bool,
            'activation_function': str,
            'batch_size': int,
            'n_epochs': int,
            'use_tensorboard': bool,
            'verbose': bool,
            'learning_rate_function': str,
            'lr_initial_learning_rate': float,
            'lr_decay_steps': int,
            'lr_decay_rate': float,
            'lr_staircase': bool,
            'lr_boundaries': List[int],
            'lr_values': List[float],
            'lr_end_learning_rate': float,
            'lr_power': float,
            'lr_cycle': bool,
            'opimizer': str,
            'momentum': float,
            'random_function_for_weights': str,
            'rw_alpha': float,
            'rw_beta': float,
            'rw_mean': float,
            'rw_stddev': float,
            'rw_lam': float,
            'rw_minval': float,
            'rw_maxval': float,
            'rw_seed': int,
            'random_function_for_biases': str,
            'rb_alpha': float,
            'rb_beta': float,
            'rb_mean': float,
            'rb_stddev': float,
            'rb_lam': float,
            'rb_minval': float,
            'rb_maxval': float,
            'rb_seed': int,
            'session_saver_path': str,
            'load_prev_session': bool
        }

        self.attribute_map = {
            'input_shape': 'inputShape',
            'number_of_stacks': 'numberOfStacks',
            'filter_sizes': 'filterSizes',
            'mirror_weights': 'mirrorWeights',
            'activation_function': 'activationFunction',
            'batch_size': 'batchSize',
            'n_epochs': 'nEpochs',
            'use_tensorboard': 'useTensorboard',
            'verbose': 'verbose',
            'learning_rate_function': 'learningRateFunction',
            'lr_initial_learning_rate': 'lrInitialLearningRate',
            'lr_decay_steps': 'lrDecaySteps',
            'lr_decay_rate': 'lrDecayRate',
            'lr_staircase': 'lrStaircase',
            'lr_boundaries': 'lrBoundaries',
            'lr_values': 'lrValues',
            'lr_end_learning_rate': 'lrEndLearningRate',
            'lr_power': 'lrPower',
            'lr_cycle': 'lrCycle',
            'opimizer': 'opimizer',
            'momentum': 'momentum',
            'random_function_for_weights': 'randomFunctionForWeights',
            'rw_alpha': 'rwAlpha',
            'rw_beta': 'rwBeta',
            'rw_mean': 'rwMean',
            'rw_stddev': 'rwStddev',
            'rw_lam': 'rwLam',
            'rw_minval': 'rwMinval',
            'rw_maxval': 'rwMaxval',
            'rw_seed': 'rwSeed',
            'random_function_for_biases': 'randomFunctionForBiases',
            'rb_alpha': 'rbAlpha',
            'rb_beta': 'rbBeta',
            'rb_mean': 'rbMean',
            'rb_stddev': 'rbStddev',
            'rb_lam': 'rbLam',
            'rb_minval': 'rbMinval',
            'rb_maxval': 'rbMaxval',
            'rb_seed': 'rbSeed',
            'session_saver_path': 'sessionSaverPath',
            'load_prev_session': 'loadPrevSession'
        }

        self._input_shape = input_shape
        self._number_of_stacks = number_of_stacks
        self._filter_sizes = filter_sizes
        self._mirror_weights = mirror_weights
        self._activation_function = activation_function
        self._batch_size = batch_size
        self._n_epochs = n_epochs
        self._use_tensorboard = use_tensorboard
        self._verbose = verbose
        self._learning_rate_function = learning_rate_function
        self._lr_initial_learning_rate = lr_initial_learning_rate
        self._lr_decay_steps = lr_decay_steps
        self._lr_decay_rate = lr_decay_rate
        self._lr_staircase = lr_staircase
        self._lr_boundaries = lr_boundaries
        self._lr_values = lr_values
        self._lr_end_learning_rate = lr_end_learning_rate
        self._lr_power = lr_power
        self._lr_cycle = lr_cycle
        self._opimizer = opimizer
        self._momentum = momentum
        self._random_function_for_weights = random_function_for_weights
        self._rw_alpha = rw_alpha
        self._rw_beta = rw_beta
        self._rw_mean = rw_mean
        self._rw_stddev = rw_stddev
        self._rw_lam = rw_lam
        self._rw_minval = rw_minval
        self._rw_maxval = rw_maxval
        self._rw_seed = rw_seed
        self._random_function_for_biases = random_function_for_biases
        self._rb_alpha = rb_alpha
        self._rb_beta = rb_beta
        self._rb_mean = rb_mean
        self._rb_stddev = rb_stddev
        self._rb_lam = rb_lam
        self._rb_minval = rb_minval
        self._rb_maxval = rb_maxval
        self._rb_seed = rb_seed
        self._session_saver_path = session_saver_path
        self._load_prev_session = load_prev_session

    @classmethod
    def from_dict(cls, dikt) -> 'ParameterSet':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ParameterSet of this ParameterSet.
        :rtype: ParameterSet
        """
        return deserialize_model(dikt, cls)

    @property
    def input_shape(self) -> List[int]:
        """
        Gets the input_shape of this ParameterSet.

        :return: The input_shape of this ParameterSet.
        :rtype: List[int]
        """
        return self._input_shape

    @input_shape.setter
    def input_shape(self, input_shape: List[int]):
        """
        Sets the input_shape of this ParameterSet.

        :param input_shape: The input_shape of this ParameterSet.
        :type input_shape: List[int]
        """

        self._input_shape = input_shape

    @property
    def number_of_stacks(self) -> List[int]:
        """
        Gets the number_of_stacks of this ParameterSet.

        :return: The number_of_stacks of this ParameterSet.
        :rtype: List[int]
        """
        return self._number_of_stacks

    @number_of_stacks.setter
    def number_of_stacks(self, number_of_stacks: List[int]):
        """
        Sets the number_of_stacks of this ParameterSet.

        :param number_of_stacks: The number_of_stacks of this ParameterSet.
        :type number_of_stacks: List[int]
        """

        self._number_of_stacks = number_of_stacks

    @property
    def filter_sizes(self) -> List[int]:
        """
        Gets the filter_sizes of this ParameterSet.

        :return: The filter_sizes of this ParameterSet.
        :rtype: List[int]
        """
        return self._filter_sizes

    @filter_sizes.setter
    def filter_sizes(self, filter_sizes: List[int]):
        """
        Sets the filter_sizes of this ParameterSet.

        :param filter_sizes: The filter_sizes of this ParameterSet.
        :type filter_sizes: List[int]
        """

        self._filter_sizes = filter_sizes

    @property
    def mirror_weights(self) -> bool:
        """
        Gets the mirror_weights of this ParameterSet.

        :return: The mirror_weights of this ParameterSet.
        :rtype: bool
        """
        return self._mirror_weights

    @mirror_weights.setter
    def mirror_weights(self, mirror_weights: bool):
        """
        Sets the mirror_weights of this ParameterSet.

        :param mirror_weights: The mirror_weights of this ParameterSet.
        :type mirror_weights: bool
        """

        self._mirror_weights = mirror_weights

    @property
    def activation_function(self) -> str:
        """
        Gets the activation_function of this ParameterSet.

        :return: The activation_function of this ParameterSet.
        :rtype: str
        """
        return self._activation_function

    @activation_function.setter
    def activation_function(self, activation_function: str):
        """
        Sets the activation_function of this ParameterSet.

        :param activation_function: The activation_function of this ParameterSet.
        :type activation_function: str
        """

        self._activation_function = activation_function

    @property
    def batch_size(self) -> int:
        """
        Gets the batch_size of this ParameterSet.

        :return: The batch_size of this ParameterSet.
        :rtype: int
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size: int):
        """
        Sets the batch_size of this ParameterSet.

        :param batch_size: The batch_size of this ParameterSet.
        :type batch_size: int
        """

        self._batch_size = batch_size

    @property
    def n_epochs(self) -> int:
        """
        Gets the n_epochs of this ParameterSet.

        :return: The n_epochs of this ParameterSet.
        :rtype: int
        """
        return self._n_epochs

    @n_epochs.setter
    def n_epochs(self, n_epochs: int):
        """
        Sets the n_epochs of this ParameterSet.

        :param n_epochs: The n_epochs of this ParameterSet.
        :type n_epochs: int
        """

        self._n_epochs = n_epochs

    @property
    def use_tensorboard(self) -> bool:
        """
        Gets the use_tensorboard of this ParameterSet.

        :return: The use_tensorboard of this ParameterSet.
        :rtype: bool
        """
        return self._use_tensorboard

    @use_tensorboard.setter
    def use_tensorboard(self, use_tensorboard: bool):
        """
        Sets the use_tensorboard of this ParameterSet.

        :param use_tensorboard: The use_tensorboard of this ParameterSet.
        :type use_tensorboard: bool
        """

        self._use_tensorboard = use_tensorboard

    @property
    def verbose(self) -> bool:
        """
        Gets the verbose of this ParameterSet.

        :return: The verbose of this ParameterSet.
        :rtype: bool
        """
        return self._verbose

    @verbose.setter
    def verbose(self, verbose: bool):
        """
        Sets the verbose of this ParameterSet.

        :param verbose: The verbose of this ParameterSet.
        :type verbose: bool
        """

        self._verbose = verbose

    @property
    def learning_rate_function(self) -> str:
        """
        Gets the learning_rate_function of this ParameterSet.

        :return: The learning_rate_function of this ParameterSet.
        :rtype: str
        """
        return self._learning_rate_function

    @learning_rate_function.setter
    def learning_rate_function(self, learning_rate_function: str):
        """
        Sets the learning_rate_function of this ParameterSet.

        :param learning_rate_function: The learning_rate_function of this ParameterSet.
        :type learning_rate_function: str
        """

        self._learning_rate_function = learning_rate_function

    @property
    def lr_initial_learning_rate(self) -> float:
        """
        Gets the lr_initial_learning_rate of this ParameterSet.

        :return: The lr_initial_learning_rate of this ParameterSet.
        :rtype: float
        """
        return self._lr_initial_learning_rate

    @lr_initial_learning_rate.setter
    def lr_initial_learning_rate(self, lr_initial_learning_rate: float):
        """
        Sets the lr_initial_learning_rate of this ParameterSet.

        :param lr_initial_learning_rate: The lr_initial_learning_rate of this ParameterSet.
        :type lr_initial_learning_rate: float
        """

        self._lr_initial_learning_rate = lr_initial_learning_rate

    @property
    def lr_decay_steps(self) -> int:
        """
        Gets the lr_decay_steps of this ParameterSet.

        :return: The lr_decay_steps of this ParameterSet.
        :rtype: int
        """
        return self._lr_decay_steps

    @lr_decay_steps.setter
    def lr_decay_steps(self, lr_decay_steps: int):
        """
        Sets the lr_decay_steps of this ParameterSet.

        :param lr_decay_steps: The lr_decay_steps of this ParameterSet.
        :type lr_decay_steps: int
        """

        self._lr_decay_steps = lr_decay_steps

    @property
    def lr_decay_rate(self) -> float:
        """
        Gets the lr_decay_rate of this ParameterSet.

        :return: The lr_decay_rate of this ParameterSet.
        :rtype: float
        """
        return self._lr_decay_rate

    @lr_decay_rate.setter
    def lr_decay_rate(self, lr_decay_rate: float):
        """
        Sets the lr_decay_rate of this ParameterSet.

        :param lr_decay_rate: The lr_decay_rate of this ParameterSet.
        :type lr_decay_rate: float
        """

        self._lr_decay_rate = lr_decay_rate

    @property
    def lr_staircase(self) -> bool:
        """
        Gets the lr_staircase of this ParameterSet.

        :return: The lr_staircase of this ParameterSet.
        :rtype: bool
        """
        return self._lr_staircase

    @lr_staircase.setter
    def lr_staircase(self, lr_staircase: bool):
        """
        Sets the lr_staircase of this ParameterSet.

        :param lr_staircase: The lr_staircase of this ParameterSet.
        :type lr_staircase: bool
        """

        self._lr_staircase = lr_staircase

    @property
    def lr_boundaries(self) -> List[int]:
        """
        Gets the lr_boundaries of this ParameterSet.

        :return: The lr_boundaries of this ParameterSet.
        :rtype: List[int]
        """
        return self._lr_boundaries

    @lr_boundaries.setter
    def lr_boundaries(self, lr_boundaries: List[int]):
        """
        Sets the lr_boundaries of this ParameterSet.

        :param lr_boundaries: The lr_boundaries of this ParameterSet.
        :type lr_boundaries: List[int]
        """

        self._lr_boundaries = lr_boundaries

    @property
    def lr_values(self) -> List[float]:
        """
        Gets the lr_values of this ParameterSet.

        :return: The lr_values of this ParameterSet.
        :rtype: List[float]
        """
        return self._lr_values

    @lr_values.setter
    def lr_values(self, lr_values: List[float]):
        """
        Sets the lr_values of this ParameterSet.

        :param lr_values: The lr_values of this ParameterSet.
        :type lr_values: List[float]
        """

        self._lr_values = lr_values

    @property
    def lr_end_learning_rate(self) -> float:
        """
        Gets the lr_end_learning_rate of this ParameterSet.

        :return: The lr_end_learning_rate of this ParameterSet.
        :rtype: float
        """
        return self._lr_end_learning_rate

    @lr_end_learning_rate.setter
    def lr_end_learning_rate(self, lr_end_learning_rate: float):
        """
        Sets the lr_end_learning_rate of this ParameterSet.

        :param lr_end_learning_rate: The lr_end_learning_rate of this ParameterSet.
        :type lr_end_learning_rate: float
        """

        self._lr_end_learning_rate = lr_end_learning_rate

    @property
    def lr_power(self) -> float:
        """
        Gets the lr_power of this ParameterSet.

        :return: The lr_power of this ParameterSet.
        :rtype: float
        """
        return self._lr_power

    @lr_power.setter
    def lr_power(self, lr_power: float):
        """
        Sets the lr_power of this ParameterSet.

        :param lr_power: The lr_power of this ParameterSet.
        :type lr_power: float
        """

        self._lr_power = lr_power

    @property
    def lr_cycle(self) -> bool:
        """
        Gets the lr_cycle of this ParameterSet.

        :return: The lr_cycle of this ParameterSet.
        :rtype: bool
        """
        return self._lr_cycle

    @lr_cycle.setter
    def lr_cycle(self, lr_cycle: bool):
        """
        Sets the lr_cycle of this ParameterSet.

        :param lr_cycle: The lr_cycle of this ParameterSet.
        :type lr_cycle: bool
        """

        self._lr_cycle = lr_cycle

    @property
    def opimizer(self) -> str:
        """
        Gets the opimizer of this ParameterSet.

        :return: The opimizer of this ParameterSet.
        :rtype: str
        """
        return self._opimizer

    @opimizer.setter
    def opimizer(self, opimizer: str):
        """
        Sets the opimizer of this ParameterSet.

        :param opimizer: The opimizer of this ParameterSet.
        :type opimizer: str
        """

        self._opimizer = opimizer

    @property
    def momentum(self) -> float:
        """
        Gets the momentum of this ParameterSet.

        :return: The momentum of this ParameterSet.
        :rtype: float
        """
        return self._momentum

    @momentum.setter
    def momentum(self, momentum: float):
        """
        Sets the momentum of this ParameterSet.

        :param momentum: The momentum of this ParameterSet.
        :type momentum: float
        """

        self._momentum = momentum

    @property
    def random_function_for_weights(self) -> str:
        """
        Gets the random_function_for_weights of this ParameterSet.

        :return: The random_function_for_weights of this ParameterSet.
        :rtype: str
        """
        return self._random_function_for_weights

    @random_function_for_weights.setter
    def random_function_for_weights(self, random_function_for_weights: str):
        """
        Sets the random_function_for_weights of this ParameterSet.

        :param random_function_for_weights: The random_function_for_weights of this ParameterSet.
        :type random_function_for_weights: str
        """

        self._random_function_for_weights = random_function_for_weights

    @property
    def rw_alpha(self) -> float:
        """
        Gets the rw_alpha of this ParameterSet.

        :return: The rw_alpha of this ParameterSet.
        :rtype: float
        """
        return self._rw_alpha

    @rw_alpha.setter
    def rw_alpha(self, rw_alpha: float):
        """
        Sets the rw_alpha of this ParameterSet.

        :param rw_alpha: The rw_alpha of this ParameterSet.
        :type rw_alpha: float
        """

        self._rw_alpha = rw_alpha

    @property
    def rw_beta(self) -> float:
        """
        Gets the rw_beta of this ParameterSet.

        :return: The rw_beta of this ParameterSet.
        :rtype: float
        """
        return self._rw_beta

    @rw_beta.setter
    def rw_beta(self, rw_beta: float):
        """
        Sets the rw_beta of this ParameterSet.

        :param rw_beta: The rw_beta of this ParameterSet.
        :type rw_beta: float
        """

        self._rw_beta = rw_beta

    @property
    def rw_mean(self) -> float:
        """
        Gets the rw_mean of this ParameterSet.

        :return: The rw_mean of this ParameterSet.
        :rtype: float
        """
        return self._rw_mean

    @rw_mean.setter
    def rw_mean(self, rw_mean: float):
        """
        Sets the rw_mean of this ParameterSet.

        :param rw_mean: The rw_mean of this ParameterSet.
        :type rw_mean: float
        """

        self._rw_mean = rw_mean

    @property
    def rw_stddev(self) -> float:
        """
        Gets the rw_stddev of this ParameterSet.

        :return: The rw_stddev of this ParameterSet.
        :rtype: float
        """
        return self._rw_stddev

    @rw_stddev.setter
    def rw_stddev(self, rw_stddev: float):
        """
        Sets the rw_stddev of this ParameterSet.

        :param rw_stddev: The rw_stddev of this ParameterSet.
        :type rw_stddev: float
        """

        self._rw_stddev = rw_stddev

    @property
    def rw_lam(self) -> float:
        """
        Gets the rw_lam of this ParameterSet.

        :return: The rw_lam of this ParameterSet.
        :rtype: float
        """
        return self._rw_lam

    @rw_lam.setter
    def rw_lam(self, rw_lam: float):
        """
        Sets the rw_lam of this ParameterSet.

        :param rw_lam: The rw_lam of this ParameterSet.
        :type rw_lam: float
        """

        self._rw_lam = rw_lam

    @property
    def rw_minval(self) -> float:
        """
        Gets the rw_minval of this ParameterSet.

        :return: The rw_minval of this ParameterSet.
        :rtype: float
        """
        return self._rw_minval

    @rw_minval.setter
    def rw_minval(self, rw_minval: float):
        """
        Sets the rw_minval of this ParameterSet.

        :param rw_minval: The rw_minval of this ParameterSet.
        :type rw_minval: float
        """

        self._rw_minval = rw_minval

    @property
    def rw_maxval(self) -> float:
        """
        Gets the rw_maxval of this ParameterSet.

        :return: The rw_maxval of this ParameterSet.
        :rtype: float
        """
        return self._rw_maxval

    @rw_maxval.setter
    def rw_maxval(self, rw_maxval: float):
        """
        Sets the rw_maxval of this ParameterSet.

        :param rw_maxval: The rw_maxval of this ParameterSet.
        :type rw_maxval: float
        """

        self._rw_maxval = rw_maxval

    @property
    def rw_seed(self) -> int:
        """
        Gets the rw_seed of this ParameterSet.

        :return: The rw_seed of this ParameterSet.
        :rtype: int
        """
        return self._rw_seed

    @rw_seed.setter
    def rw_seed(self, rw_seed: int):
        """
        Sets the rw_seed of this ParameterSet.

        :param rw_seed: The rw_seed of this ParameterSet.
        :type rw_seed: int
        """

        self._rw_seed = rw_seed

    @property
    def random_function_for_biases(self) -> str:
        """
        Gets the random_function_for_biases of this ParameterSet.

        :return: The random_function_for_biases of this ParameterSet.
        :rtype: str
        """
        return self._random_function_for_biases

    @random_function_for_biases.setter
    def random_function_for_biases(self, random_function_for_biases: str):
        """
        Sets the random_function_for_biases of this ParameterSet.

        :param random_function_for_biases: The random_function_for_biases of this ParameterSet.
        :type random_function_for_biases: str
        """

        self._random_function_for_biases = random_function_for_biases

    @property
    def rb_alpha(self) -> float:
        """
        Gets the rb_alpha of this ParameterSet.

        :return: The rb_alpha of this ParameterSet.
        :rtype: float
        """
        return self._rb_alpha

    @rb_alpha.setter
    def rb_alpha(self, rb_alpha: float):
        """
        Sets the rb_alpha of this ParameterSet.

        :param rb_alpha: The rb_alpha of this ParameterSet.
        :type rb_alpha: float
        """

        self._rb_alpha = rb_alpha

    @property
    def rb_beta(self) -> float:
        """
        Gets the rb_beta of this ParameterSet.

        :return: The rb_beta of this ParameterSet.
        :rtype: float
        """
        return self._rb_beta

    @rb_beta.setter
    def rb_beta(self, rb_beta: float):
        """
        Sets the rb_beta of this ParameterSet.

        :param rb_beta: The rb_beta of this ParameterSet.
        :type rb_beta: float
        """

        self._rb_beta = rb_beta

    @property
    def rb_mean(self) -> float:
        """
        Gets the rb_mean of this ParameterSet.

        :return: The rb_mean of this ParameterSet.
        :rtype: float
        """
        return self._rb_mean

    @rb_mean.setter
    def rb_mean(self, rb_mean: float):
        """
        Sets the rb_mean of this ParameterSet.

        :param rb_mean: The rb_mean of this ParameterSet.
        :type rb_mean: float
        """

        self._rb_mean = rb_mean

    @property
    def rb_stddev(self) -> float:
        """
        Gets the rb_stddev of this ParameterSet.

        :return: The rb_stddev of this ParameterSet.
        :rtype: float
        """
        return self._rb_stddev

    @rb_stddev.setter
    def rb_stddev(self, rb_stddev: float):
        """
        Sets the rb_stddev of this ParameterSet.

        :param rb_stddev: The rb_stddev of this ParameterSet.
        :type rb_stddev: float
        """

        self._rb_stddev = rb_stddev

    @property
    def rb_lam(self) -> float:
        """
        Gets the rb_lam of this ParameterSet.

        :return: The rb_lam of this ParameterSet.
        :rtype: float
        """
        return self._rb_lam

    @rb_lam.setter
    def rb_lam(self, rb_lam: float):
        """
        Sets the rb_lam of this ParameterSet.

        :param rb_lam: The rb_lam of this ParameterSet.
        :type rb_lam: float
        """

        self._rb_lam = rb_lam

    @property
    def rb_minval(self) -> float:
        """
        Gets the rb_minval of this ParameterSet.

        :return: The rb_minval of this ParameterSet.
        :rtype: float
        """
        return self._rb_minval

    @rb_minval.setter
    def rb_minval(self, rb_minval: float):
        """
        Sets the rb_minval of this ParameterSet.

        :param rb_minval: The rb_minval of this ParameterSet.
        :type rb_minval: float
        """

        self._rb_minval = rb_minval

    @property
    def rb_maxval(self) -> float:
        """
        Gets the rb_maxval of this ParameterSet.

        :return: The rb_maxval of this ParameterSet.
        :rtype: float
        """
        return self._rb_maxval

    @rb_maxval.setter
    def rb_maxval(self, rb_maxval: float):
        """
        Sets the rb_maxval of this ParameterSet.

        :param rb_maxval: The rb_maxval of this ParameterSet.
        :type rb_maxval: float
        """

        self._rb_maxval = rb_maxval

    @property
    def rb_seed(self) -> int:
        """
        Gets the rb_seed of this ParameterSet.

        :return: The rb_seed of this ParameterSet.
        :rtype: int
        """
        return self._rb_seed

    @rb_seed.setter
    def rb_seed(self, rb_seed: int):
        """
        Sets the rb_seed of this ParameterSet.

        :param rb_seed: The rb_seed of this ParameterSet.
        :type rb_seed: int
        """

        self._rb_seed = rb_seed

    @property
    def session_saver_path(self) -> str:
        """
        Gets the session_saver_path of this ParameterSet.

        :return: The session_saver_path of this ParameterSet.
        :rtype: str
        """
        return self._session_saver_path

    @session_saver_path.setter
    def session_saver_path(self, session_saver_path: str):
        """
        Sets the session_saver_path of this ParameterSet.

        :param session_saver_path: The session_saver_path of this ParameterSet.
        :type session_saver_path: str
        """

        self._session_saver_path = session_saver_path

    @property
    def load_prev_session(self) -> bool:
        """
        Gets the load_prev_session of this ParameterSet.

        :return: The load_prev_session of this ParameterSet.
        :rtype: bool
        """
        return self._load_prev_session

    @load_prev_session.setter
    def load_prev_session(self, load_prev_session: bool):
        """
        Sets the load_prev_session of this ParameterSet.

        :param load_prev_session: The load_prev_session of this ParameterSet.
        :type load_prev_session: bool
        """

        self._load_prev_session = load_prev_session

