# coding: utf-8

from __future__ import absolute_import

from typing import List

from .base_model_ import Model
from ..util import deserialize_model


class LearningRate(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    def __init__(self, learning_rate_function: str = None, lr_initial_learning_rate: List[float] = None,
                 lr_decay_steps: List[int] = None, lr_decay_rate: List[float] = None, lr_staircase: List[bool] = None,
                 lr_boundaries: List[List[int]] = None, lr_values: List[List[float]] = None,
                 lr_end_learning_rate: List[float] = None, lr_power: List[float] = None, lr_cycle: List[bool] = None):
        """
        LearningRate - a model defined in Swagger

        :param learning_rate_function: The learning_rate_function of this LearningRate.
        :type learning_rate_function: str
        :param lr_initial_learning_rate: The lr_initial_learning_rate of this LearningRate.
        :type lr_initial_learning_rate: List[float]
        :param lr_decay_steps: The lr_decay_steps of this LearningRate.
        :type lr_decay_steps: List[int]
        :param lr_decay_rate: The lr_decay_rate of this LearningRate.
        :type lr_decay_rate: List[float]
        :param lr_staircase: The lr_staircase of this LearningRate.
        :type lr_staircase: List[bool]
        :param lr_boundaries: The lr_boundaries of this LearningRate.
        :type lr_boundaries: List[List[int]]
        :param lr_values: The lr_values of this LearningRate.
        :type lr_values: List[List[float]]
        :param lr_end_learning_rate: The lr_end_learning_rate of this LearningRate.
        :type lr_end_learning_rate: List[float]
        :param lr_power: The lr_power of this LearningRate.
        :type lr_power: List[float]
        :param lr_cycle: The lr_cycle of this LearningRate.
        :type lr_cycle: List[bool]
        """
        self.swagger_types = {
            'learning_rate_function': str,
            'lr_initial_learning_rate': List[float],
            'lr_decay_steps': List[int],
            'lr_decay_rate': List[float],
            'lr_staircase': List[bool],
            'lr_boundaries': List[List[int]],
            'lr_values': List[List[float]],
            'lr_end_learning_rate': List[float],
            'lr_power': List[float],
            'lr_cycle': List[bool]
        }

        self.attribute_map = {
            'learning_rate_function': 'learning_rate_function',
            'lr_initial_learning_rate': 'lr_initial_learning_rate',
            'lr_decay_steps': 'lr_decay_steps',
            'lr_decay_rate': 'lr_decay_rate',
            'lr_staircase': 'lr_staircase',
            'lr_boundaries': 'lr_boundaries',
            'lr_values': 'lr_values',
            'lr_end_learning_rate': 'lr_end_learning_rate',
            'lr_power': 'lr_power',
            'lr_cycle': 'lr_cycle'
        }

        self._learning_rate_function = learning_rate_function
        self._lr_initial_learning_rate = lr_initial_learning_rate
        self._lr_decay_steps = lr_decay_steps
        self._lr_decay_rate = lr_decay_rate
        self._lr_staircase = lr_staircase
        self._lr_boundaries = lr_boundaries
        self._lr_values = lr_values
        self._lr_end_learning_rate = lr_end_learning_rate
        self._lr_power = lr_power
        self._lr_cycle = lr_cycle

    @classmethod
    def from_dict(cls, dikt) -> 'LearningRate':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LearningRate of this LearningRate.
        :rtype: LearningRate
        """
        return deserialize_model(dikt, cls)

    @property
    def learning_rate_function(self) -> str:
        """
        Gets the learning_rate_function of this LearningRate.

        :return: The learning_rate_function of this LearningRate.
        :rtype: str
        """
        return self._learning_rate_function

    @learning_rate_function.setter
    def learning_rate_function(self, learning_rate_function: str):
        """
        Sets the learning_rate_function of this LearningRate.

        :param learning_rate_function: The learning_rate_function of this LearningRate.
        :type learning_rate_function: str
        """

        self._learning_rate_function = learning_rate_function

    @property
    def lr_initial_learning_rate(self) -> List[float]:
        """
        Gets the lr_initial_learning_rate of this LearningRate.

        :return: The lr_initial_learning_rate of this LearningRate.
        :rtype: List[float]
        """
        return self._lr_initial_learning_rate

    @lr_initial_learning_rate.setter
    def lr_initial_learning_rate(self, lr_initial_learning_rate: List[float]):
        """
        Sets the lr_initial_learning_rate of this LearningRate.

        :param lr_initial_learning_rate: The lr_initial_learning_rate of this LearningRate.
        :type lr_initial_learning_rate: List[float]
        """

        self._lr_initial_learning_rate = lr_initial_learning_rate

    @property
    def lr_decay_steps(self) -> List[int]:
        """
        Gets the lr_decay_steps of this LearningRate.

        :return: The lr_decay_steps of this LearningRate.
        :rtype: List[int]
        """
        return self._lr_decay_steps

    @lr_decay_steps.setter
    def lr_decay_steps(self, lr_decay_steps: List[int]):
        """
        Sets the lr_decay_steps of this LearningRate.

        :param lr_decay_steps: The lr_decay_steps of this LearningRate.
        :type lr_decay_steps: List[int]
        """

        self._lr_decay_steps = lr_decay_steps

    @property
    def lr_decay_rate(self) -> List[float]:
        """
        Gets the lr_decay_rate of this LearningRate.

        :return: The lr_decay_rate of this LearningRate.
        :rtype: List[float]
        """
        return self._lr_decay_rate

    @lr_decay_rate.setter
    def lr_decay_rate(self, lr_decay_rate: List[float]):
        """
        Sets the lr_decay_rate of this LearningRate.

        :param lr_decay_rate: The lr_decay_rate of this LearningRate.
        :type lr_decay_rate: List[float]
        """

        self._lr_decay_rate = lr_decay_rate

    @property
    def lr_staircase(self) -> List[bool]:
        """
        Gets the lr_staircase of this LearningRate.

        :return: The lr_staircase of this LearningRate.
        :rtype: List[bool]
        """
        return self._lr_staircase

    @lr_staircase.setter
    def lr_staircase(self, lr_staircase: List[bool]):
        """
        Sets the lr_staircase of this LearningRate.

        :param lr_staircase: The lr_staircase of this LearningRate.
        :type lr_staircase: List[bool]
        """

        self._lr_staircase = lr_staircase

    @property
    def lr_boundaries(self) -> List[List[int]]:
        """
        Gets the lr_boundaries of this LearningRate.

        :return: The lr_boundaries of this LearningRate.
        :rtype: List[List[int]]
        """
        return self._lr_boundaries

    @lr_boundaries.setter
    def lr_boundaries(self, lr_boundaries: List[List[int]]):
        """
        Sets the lr_boundaries of this LearningRate.

        :param lr_boundaries: The lr_boundaries of this LearningRate.
        :type lr_boundaries: List[List[int]]
        """

        self._lr_boundaries = lr_boundaries

    @property
    def lr_values(self) -> List[List[float]]:
        """
        Gets the lr_values of this LearningRate.

        :return: The lr_values of this LearningRate.
        :rtype: List[List[float]]
        """
        return self._lr_values

    @lr_values.setter
    def lr_values(self, lr_values: List[List[float]]):
        """
        Sets the lr_values of this LearningRate.

        :param lr_values: The lr_values of this LearningRate.
        :type lr_values: List[List[float]]
        """

        self._lr_values = lr_values

    @property
    def lr_end_learning_rate(self) -> List[float]:
        """
        Gets the lr_end_learning_rate of this LearningRate.

        :return: The lr_end_learning_rate of this LearningRate.
        :rtype: List[float]
        """
        return self._lr_end_learning_rate

    @lr_end_learning_rate.setter
    def lr_end_learning_rate(self, lr_end_learning_rate: List[float]):
        """
        Sets the lr_end_learning_rate of this LearningRate.

        :param lr_end_learning_rate: The lr_end_learning_rate of this LearningRate.
        :type lr_end_learning_rate: List[float]
        """

        self._lr_end_learning_rate = lr_end_learning_rate

    @property
    def lr_power(self) -> List[float]:
        """
        Gets the lr_power of this LearningRate.

        :return: The lr_power of this LearningRate.
        :rtype: List[float]
        """
        return self._lr_power

    @lr_power.setter
    def lr_power(self, lr_power: List[float]):
        """
        Sets the lr_power of this LearningRate.

        :param lr_power: The lr_power of this LearningRate.
        :type lr_power: List[float]
        """

        self._lr_power = lr_power

    @property
    def lr_cycle(self) -> List[bool]:
        """
        Gets the lr_cycle of this LearningRate.

        :return: The lr_cycle of this LearningRate.
        :rtype: List[bool]
        """
        return self._lr_cycle

    @lr_cycle.setter
    def lr_cycle(self, lr_cycle: List[bool]):
        """
        Sets the lr_cycle of this LearningRate.

        :param lr_cycle: The lr_cycle of this LearningRate.
        :type lr_cycle: List[bool]
        """

        self._lr_cycle = lr_cycle
