# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from flask_server.swagger_server import util
from flask_server.swagger_server.models.base_model_ import Model
from flask_server.swagger_server.models.image import Image  # noqa: F401,E501


class ProcessedImageData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, epoch: float = None, step: float = None, input_layer: List[Image] = None,
                 latent_layer: List[List[Image]] = None, output_layer: List[Image] = None):  # noqa: E501
        """ProcessedImageData - a model defined in Swagger

        :param epoch: The epoch of this ProcessedImageData.  # noqa: E501
        :type epoch: float
        :param step: The step of this ProcessedImageData.  # noqa: E501
        :type step: float
        :param input_layer: The input_layer of this ProcessedImageData.  # noqa: E501
        :type input_layer: List[Image]
        :param latent_layer: The latent_layer of this ProcessedImageData.  # noqa: E501
        :type latent_layer: List[List[Image]]
        :param output_layer: The output_layer of this ProcessedImageData.  # noqa: E501
        :type output_layer: List[Image]
        """
        self.swagger_types = {
            'epoch': float,
            'step': float,
            'input_layer': List[Image],
            'latent_layer': List[List[Image]],
            'output_layer': List[Image]
        }

        self.attribute_map = {
            'epoch': 'epoch',
            'step': 'step',
            'input_layer': 'inputLayer',
            'latent_layer': 'latentLayer',
            'output_layer': 'outputLayer'
        }

        self._epoch = epoch
        self._step = step
        self._input_layer = input_layer
        self._latent_layer = latent_layer
        self._output_layer = output_layer

    @classmethod
    def from_dict(cls, dikt) -> 'ProcessedImageData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProcessedImageData of this ProcessedImageData.  # noqa: E501
        :rtype: ProcessedImageData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def epoch(self) -> float:
        """Gets the epoch of this ProcessedImageData.


        :return: The epoch of this ProcessedImageData.
        :rtype: float
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch: float):
        """Sets the epoch of this ProcessedImageData.


        :param epoch: The epoch of this ProcessedImageData.
        :type epoch: float
        """

        self._epoch = epoch

    @property
    def step(self) -> float:
        """Gets the step of this ProcessedImageData.


        :return: The step of this ProcessedImageData.
        :rtype: float
        """
        return self._step

    @step.setter
    def step(self, step: float):
        """Sets the step of this ProcessedImageData.


        :param step: The step of this ProcessedImageData.
        :type step: float
        """

        self._step = step

    @property
    def input_layer(self) -> List[Image]:
        """Gets the input_layer of this ProcessedImageData.


        :return: The input_layer of this ProcessedImageData.
        :rtype: List[Image]
        """
        return self._input_layer

    @input_layer.setter
    def input_layer(self, input_layer: List[Image]):
        """Sets the input_layer of this ProcessedImageData.


        :param input_layer: The input_layer of this ProcessedImageData.
        :type input_layer: List[Image]
        """

        self._input_layer = input_layer

    @property
    def latent_layer(self) -> List[List[Image]]:
        """Gets the latent_layer of this ProcessedImageData.


        :return: The latent_layer of this ProcessedImageData.
        :rtype: List[List[Image]]
        """
        return self._latent_layer

    @latent_layer.setter
    def latent_layer(self, latent_layer: List[List[Image]]):
        """Sets the latent_layer of this ProcessedImageData.


        :param latent_layer: The latent_layer of this ProcessedImageData.
        :type latent_layer: List[List[Image]]
        """

        self._latent_layer = latent_layer

    @property
    def output_layer(self) -> List[Image]:
        """Gets the output_layer of this ProcessedImageData.


        :return: The output_layer of this ProcessedImageData.
        :rtype: List[Image]
        """
        return self._output_layer

    @output_layer.setter
    def output_layer(self, output_layer: List[Image]):
        """Sets the output_layer of this ProcessedImageData.


        :param output_layer: The output_layer of this ProcessedImageData.
        :type output_layer: List[Image]
        """

        self._output_layer = output_layer
