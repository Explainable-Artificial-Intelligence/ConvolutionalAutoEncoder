# coding: utf-8

from __future__ import absolute_import

from flask_server.swagger_server import util
from flask_server.swagger_server.models.base_model_ import Model


class ClusterParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, n_clusters: int = None, init: str = None, n_init: int = None, max_iter: int = None,
                 tol: float = None, precompute_distances: str = None, verbose: int = None, random_state: int = None,
                 copy_x: bool = None, n_jobs: int = None, algorithm: str = None):  # noqa: E501
        """ClusterParameters - a model defined in Swagger

        :param n_clusters: The n_clusters of this ClusterParameters.  # noqa: E501
        :type n_clusters: int
        :param init: The init of this ClusterParameters.  # noqa: E501
        :type init: str
        :param n_init: The n_init of this ClusterParameters.  # noqa: E501
        :type n_init: int
        :param max_iter: The max_iter of this ClusterParameters.  # noqa: E501
        :type max_iter: int
        :param tol: The tol of this ClusterParameters.  # noqa: E501
        :type tol: float
        :param precompute_distances: The precompute_distances of this ClusterParameters.  # noqa: E501
        :type precompute_distances: str
        :param verbose: The verbose of this ClusterParameters.  # noqa: E501
        :type verbose: int
        :param random_state: The random_state of this ClusterParameters.  # noqa: E501
        :type random_state: int
        :param copy_x: The copy_x of this ClusterParameters.  # noqa: E501
        :type copy_x: bool
        :param n_jobs: The n_jobs of this ClusterParameters.  # noqa: E501
        :type n_jobs: int
        :param algorithm: The algorithm of this ClusterParameters.  # noqa: E501
        :type algorithm: str
        """
        self.swagger_types = {
            'n_clusters': int,
            'init': str,
            'n_init': int,
            'max_iter': int,
            'tol': float,
            'precompute_distances': str,
            'verbose': int,
            'random_state': int,
            'copy_x': bool,
            'n_jobs': int,
            'algorithm': str
        }

        self.attribute_map = {
            'n_clusters': 'n_clusters',
            'init': 'init',
            'n_init': 'n_init',
            'max_iter': 'max_iter',
            'tol': 'tol',
            'precompute_distances': 'precompute_distances',
            'verbose': 'verbose',
            'random_state': 'random_state',
            'copy_x': 'copy_x',
            'n_jobs': 'n_jobs',
            'algorithm': 'algorithm'
        }

        self._n_clusters = n_clusters
        self._init = init
        self._n_init = n_init
        self._max_iter = max_iter
        self._tol = tol
        self._precompute_distances = precompute_distances
        self._verbose = verbose
        self._random_state = random_state
        self._copy_x = copy_x
        self._n_jobs = n_jobs
        self._algorithm = algorithm

    @classmethod
    def from_dict(cls, dikt) -> 'ClusterParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClusterParameters of this ClusterParameters.  # noqa: E501
        :rtype: ClusterParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def n_clusters(self) -> int:
        """Gets the n_clusters of this ClusterParameters.


        :return: The n_clusters of this ClusterParameters.
        :rtype: int
        """
        return self._n_clusters

    @n_clusters.setter
    def n_clusters(self, n_clusters: int):
        """Sets the n_clusters of this ClusterParameters.


        :param n_clusters: The n_clusters of this ClusterParameters.
        :type n_clusters: int
        """

        self._n_clusters = n_clusters

    @property
    def init(self) -> str:
        """Gets the init of this ClusterParameters.


        :return: The init of this ClusterParameters.
        :rtype: str
        """
        return self._init

    @init.setter
    def init(self, init: str):
        """Sets the init of this ClusterParameters.


        :param init: The init of this ClusterParameters.
        :type init: str
        """

        self._init = init

    @property
    def n_init(self) -> int:
        """Gets the n_init of this ClusterParameters.


        :return: The n_init of this ClusterParameters.
        :rtype: int
        """
        return self._n_init

    @n_init.setter
    def n_init(self, n_init: int):
        """Sets the n_init of this ClusterParameters.


        :param n_init: The n_init of this ClusterParameters.
        :type n_init: int
        """

        self._n_init = n_init

    @property
    def max_iter(self) -> int:
        """Gets the max_iter of this ClusterParameters.


        :return: The max_iter of this ClusterParameters.
        :rtype: int
        """
        return self._max_iter

    @max_iter.setter
    def max_iter(self, max_iter: int):
        """Sets the max_iter of this ClusterParameters.


        :param max_iter: The max_iter of this ClusterParameters.
        :type max_iter: int
        """

        self._max_iter = max_iter

    @property
    def tol(self) -> float:
        """Gets the tol of this ClusterParameters.


        :return: The tol of this ClusterParameters.
        :rtype: float
        """
        return self._tol

    @tol.setter
    def tol(self, tol: float):
        """Sets the tol of this ClusterParameters.


        :param tol: The tol of this ClusterParameters.
        :type tol: float
        """

        self._tol = tol

    @property
    def precompute_distances(self) -> str:
        """Gets the precompute_distances of this ClusterParameters.


        :return: The precompute_distances of this ClusterParameters.
        :rtype: str
        """
        return self._precompute_distances

    @precompute_distances.setter
    def precompute_distances(self, precompute_distances: str):
        """Sets the precompute_distances of this ClusterParameters.


        :param precompute_distances: The precompute_distances of this ClusterParameters.
        :type precompute_distances: str
        """

        self._precompute_distances = precompute_distances

    @property
    def verbose(self) -> int:
        """Gets the verbose of this ClusterParameters.


        :return: The verbose of this ClusterParameters.
        :rtype: int
        """
        return self._verbose

    @verbose.setter
    def verbose(self, verbose: int):
        """Sets the verbose of this ClusterParameters.


        :param verbose: The verbose of this ClusterParameters.
        :type verbose: int
        """

        self._verbose = verbose

    @property
    def random_state(self) -> int:
        """Gets the random_state of this ClusterParameters.


        :return: The random_state of this ClusterParameters.
        :rtype: int
        """
        return self._random_state

    @random_state.setter
    def random_state(self, random_state: int):
        """Sets the random_state of this ClusterParameters.


        :param random_state: The random_state of this ClusterParameters.
        :type random_state: int
        """

        self._random_state = random_state

    @property
    def copy_x(self) -> bool:
        """Gets the copy_x of this ClusterParameters.


        :return: The copy_x of this ClusterParameters.
        :rtype: bool
        """
        return self._copy_x

    @copy_x.setter
    def copy_x(self, copy_x: bool):
        """Sets the copy_x of this ClusterParameters.


        :param copy_x: The copy_x of this ClusterParameters.
        :type copy_x: bool
        """

        self._copy_x = copy_x

    @property
    def n_jobs(self) -> int:
        """Gets the n_jobs of this ClusterParameters.


        :return: The n_jobs of this ClusterParameters.
        :rtype: int
        """
        return self._n_jobs

    @n_jobs.setter
    def n_jobs(self, n_jobs: int):
        """Sets the n_jobs of this ClusterParameters.


        :param n_jobs: The n_jobs of this ClusterParameters.
        :type n_jobs: int
        """

        self._n_jobs = n_jobs

    @property
    def algorithm(self) -> str:
        """Gets the algorithm of this ClusterParameters.


        :return: The algorithm of this ClusterParameters.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm: str):
        """Sets the algorithm of this ClusterParameters.


        :param algorithm: The algorithm of this ClusterParameters.
        :type algorithm: str
        """

        self._algorithm = algorithm
