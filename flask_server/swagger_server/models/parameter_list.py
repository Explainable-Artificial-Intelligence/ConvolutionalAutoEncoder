# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.cost_function import CostFunction  # noqa: F401,E501
from swagger_server.models.learning_rate import LearningRate  # noqa: F401,E501
from swagger_server.models.random_function import RandomFunction  # noqa: F401,E501


class ParameterList(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, input_shape: List[List[int]] = None, number_of_stacks: List[List[int]] = None,
                 filter_sizes: List[List[int]] = None, mirror_weights: List[bool] = None,
                 activation_function: List[str] = None, batch_size: List[int] = None, n_epochs: List[int] = None,
                 use_tensorboard: bool = True, verbose: bool = True, learning_rate_dict: List[LearningRate] = None,
                 cost_function_dict: List[CostFunction] = None, optimizer: List[str] = None,
                 momentum: List[float] = None, random_weights_dict: List[RandomFunction] = None,
                 random_biases_dict: List[RandomFunction] = None, session_saver_path: str = './save/',
                 load_prev_session: bool = False, session_save_duration: List[int] = None,
                 num_test_pictures: List[int] = None):  # noqa: E501
        """ParameterList - a model defined in Swagger

        :param input_shape: The input_shape of this ParameterList.  # noqa: E501
        :type input_shape: List[List[int]]
        :param number_of_stacks: The number_of_stacks of this ParameterList.  # noqa: E501
        :type number_of_stacks: List[List[int]]
        :param filter_sizes: The filter_sizes of this ParameterList.  # noqa: E501
        :type filter_sizes: List[List[int]]
        :param mirror_weights: The mirror_weights of this ParameterList.  # noqa: E501
        :type mirror_weights: List[bool]
        :param activation_function: The activation_function of this ParameterList.  # noqa: E501
        :type activation_function: List[str]
        :param batch_size: The batch_size of this ParameterList.  # noqa: E501
        :type batch_size: List[int]
        :param n_epochs: The n_epochs of this ParameterList.  # noqa: E501
        :type n_epochs: List[int]
        :param use_tensorboard: The use_tensorboard of this ParameterList.  # noqa: E501
        :type use_tensorboard: bool
        :param verbose: The verbose of this ParameterList.  # noqa: E501
        :type verbose: bool
        :param learning_rate_dict: The learning_rate_dict of this ParameterList.  # noqa: E501
        :type learning_rate_dict: List[LearningRate]
        :param cost_function_dict: The cost_function_dict of this ParameterList.  # noqa: E501
        :type cost_function_dict: List[CostFunction]
        :param optimizer: The optimizer of this ParameterList.  # noqa: E501
        :type optimizer: List[str]
        :param momentum: The momentum of this ParameterList.  # noqa: E501
        :type momentum: List[float]
        :param random_weights_dict: The random_weights_dict of this ParameterList.  # noqa: E501
        :type random_weights_dict: List[RandomFunction]
        :param random_biases_dict: The random_biases_dict of this ParameterList.  # noqa: E501
        :type random_biases_dict: List[RandomFunction]
        :param session_saver_path: The session_saver_path of this ParameterList.  # noqa: E501
        :type session_saver_path: str
        :param load_prev_session: The load_prev_session of this ParameterList.  # noqa: E501
        :type load_prev_session: bool
        :param session_save_duration: The session_save_duration of this ParameterList.  # noqa: E501
        :type session_save_duration: List[int]
        :param num_test_pictures: The num_test_pictures of this ParameterList.  # noqa: E501
        :type num_test_pictures: List[int]
        """
        self.swagger_types = {
            'input_shape': List[List[int]],
            'number_of_stacks': List[List[int]],
            'filter_sizes': List[List[int]],
            'mirror_weights': List[bool],
            'activation_function': List[str],
            'batch_size': List[int],
            'n_epochs': List[int],
            'use_tensorboard': bool,
            'verbose': bool,
            'learning_rate_dict': List[LearningRate],
            'cost_function_dict': List[CostFunction],
            'optimizer': List[str],
            'momentum': List[float],
            'random_weights_dict': List[RandomFunction],
            'random_biases_dict': List[RandomFunction],
            'session_saver_path': str,
            'load_prev_session': bool,
            'session_save_duration': List[int],
            'num_test_pictures': List[int]
        }

        self.attribute_map = {
            'input_shape': 'input_shape',
            'number_of_stacks': 'number_of_stacks',
            'filter_sizes': 'filter_sizes',
            'mirror_weights': 'mirror_weights',
            'activation_function': 'activation_function',
            'batch_size': 'batch_size',
            'n_epochs': 'n_epochs',
            'use_tensorboard': 'use_tensorboard',
            'verbose': 'verbose',
            'learning_rate_dict': 'learning_rate_dict',
            'cost_function_dict': 'cost_function_dict',
            'optimizer': 'optimizer',
            'momentum': 'momentum',
            'random_weights_dict': 'random_weights_dict',
            'random_biases_dict': 'random_biases_dict',
            'session_saver_path': 'session_saver_path',
            'load_prev_session': 'load_prev_session',
            'session_save_duration': 'session_save_duration',
            'num_test_pictures': 'num_test_pictures'
        }

        self._input_shape = input_shape
        self._number_of_stacks = number_of_stacks
        self._filter_sizes = filter_sizes
        self._mirror_weights = mirror_weights
        self._activation_function = activation_function
        self._batch_size = batch_size
        self._n_epochs = n_epochs
        self._use_tensorboard = use_tensorboard
        self._verbose = verbose
        self._learning_rate_dict = learning_rate_dict
        self._cost_function_dict = cost_function_dict
        self._optimizer = optimizer
        self._momentum = momentum
        self._random_weights_dict = random_weights_dict
        self._random_biases_dict = random_biases_dict
        self._session_saver_path = session_saver_path
        self._load_prev_session = load_prev_session
        self._session_save_duration = session_save_duration
        self._num_test_pictures = num_test_pictures

    @classmethod
    def from_dict(cls, dikt) -> 'ParameterList':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ParameterList of this ParameterList.  # noqa: E501
        :rtype: ParameterList
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_shape(self) -> List[List[int]]:
        """Gets the input_shape of this ParameterList.


        :return: The input_shape of this ParameterList.
        :rtype: List[List[int]]
        """
        return self._input_shape

    @input_shape.setter
    def input_shape(self, input_shape: List[List[int]]):
        """Sets the input_shape of this ParameterList.


        :param input_shape: The input_shape of this ParameterList.
        :type input_shape: List[List[int]]
        """

        self._input_shape = input_shape

    @property
    def number_of_stacks(self) -> List[List[int]]:
        """Gets the number_of_stacks of this ParameterList.


        :return: The number_of_stacks of this ParameterList.
        :rtype: List[List[int]]
        """
        return self._number_of_stacks

    @number_of_stacks.setter
    def number_of_stacks(self, number_of_stacks: List[List[int]]):
        """Sets the number_of_stacks of this ParameterList.


        :param number_of_stacks: The number_of_stacks of this ParameterList.
        :type number_of_stacks: List[List[int]]
        """

        self._number_of_stacks = number_of_stacks

    @property
    def filter_sizes(self) -> List[List[int]]:
        """Gets the filter_sizes of this ParameterList.


        :return: The filter_sizes of this ParameterList.
        :rtype: List[List[int]]
        """
        return self._filter_sizes

    @filter_sizes.setter
    def filter_sizes(self, filter_sizes: List[List[int]]):
        """Sets the filter_sizes of this ParameterList.


        :param filter_sizes: The filter_sizes of this ParameterList.
        :type filter_sizes: List[List[int]]
        """

        self._filter_sizes = filter_sizes

    @property
    def mirror_weights(self) -> List[bool]:
        """Gets the mirror_weights of this ParameterList.


        :return: The mirror_weights of this ParameterList.
        :rtype: List[bool]
        """
        return self._mirror_weights

    @mirror_weights.setter
    def mirror_weights(self, mirror_weights: List[bool]):
        """Sets the mirror_weights of this ParameterList.


        :param mirror_weights: The mirror_weights of this ParameterList.
        :type mirror_weights: List[bool]
        """

        self._mirror_weights = mirror_weights

    @property
    def activation_function(self) -> List[str]:
        """Gets the activation_function of this ParameterList.


        :return: The activation_function of this ParameterList.
        :rtype: List[str]
        """
        return self._activation_function

    @activation_function.setter
    def activation_function(self, activation_function: List[str]):
        """Sets the activation_function of this ParameterList.


        :param activation_function: The activation_function of this ParameterList.
        :type activation_function: List[str]
        """

        self._activation_function = activation_function

    @property
    def batch_size(self) -> List[int]:
        """Gets the batch_size of this ParameterList.


        :return: The batch_size of this ParameterList.
        :rtype: List[int]
        """
        return self._batch_size

    @batch_size.setter
    def batch_size(self, batch_size: List[int]):
        """Sets the batch_size of this ParameterList.


        :param batch_size: The batch_size of this ParameterList.
        :type batch_size: List[int]
        """

        self._batch_size = batch_size

    @property
    def n_epochs(self) -> List[int]:
        """Gets the n_epochs of this ParameterList.


        :return: The n_epochs of this ParameterList.
        :rtype: List[int]
        """
        return self._n_epochs

    @n_epochs.setter
    def n_epochs(self, n_epochs: List[int]):
        """Sets the n_epochs of this ParameterList.


        :param n_epochs: The n_epochs of this ParameterList.
        :type n_epochs: List[int]
        """

        self._n_epochs = n_epochs

    @property
    def use_tensorboard(self) -> bool:
        """Gets the use_tensorboard of this ParameterList.


        :return: The use_tensorboard of this ParameterList.
        :rtype: bool
        """
        return self._use_tensorboard

    @use_tensorboard.setter
    def use_tensorboard(self, use_tensorboard: bool):
        """Sets the use_tensorboard of this ParameterList.


        :param use_tensorboard: The use_tensorboard of this ParameterList.
        :type use_tensorboard: bool
        """

        self._use_tensorboard = use_tensorboard

    @property
    def verbose(self) -> bool:
        """Gets the verbose of this ParameterList.


        :return: The verbose of this ParameterList.
        :rtype: bool
        """
        return self._verbose

    @verbose.setter
    def verbose(self, verbose: bool):
        """Sets the verbose of this ParameterList.


        :param verbose: The verbose of this ParameterList.
        :type verbose: bool
        """

        self._verbose = verbose

    @property
    def learning_rate_dict(self) -> List[LearningRate]:
        """Gets the learning_rate_dict of this ParameterList.


        :return: The learning_rate_dict of this ParameterList.
        :rtype: List[LearningRate]
        """
        return self._learning_rate_dict

    @learning_rate_dict.setter
    def learning_rate_dict(self, learning_rate_dict: List[LearningRate]):
        """Sets the learning_rate_dict of this ParameterList.


        :param learning_rate_dict: The learning_rate_dict of this ParameterList.
        :type learning_rate_dict: List[LearningRate]
        """

        self._learning_rate_dict = learning_rate_dict

    @property
    def cost_function_dict(self) -> List[CostFunction]:
        """Gets the cost_function_dict of this ParameterList.


        :return: The cost_function_dict of this ParameterList.
        :rtype: List[CostFunction]
        """
        return self._cost_function_dict

    @cost_function_dict.setter
    def cost_function_dict(self, cost_function_dict: List[CostFunction]):
        """Sets the cost_function_dict of this ParameterList.


        :param cost_function_dict: The cost_function_dict of this ParameterList.
        :type cost_function_dict: List[CostFunction]
        """

        self._cost_function_dict = cost_function_dict

    @property
    def optimizer(self) -> List[str]:
        """Gets the optimizer of this ParameterList.


        :return: The optimizer of this ParameterList.
        :rtype: List[str]
        """
        return self._optimizer

    @optimizer.setter
    def optimizer(self, optimizer: List[str]):
        """Sets the optimizer of this ParameterList.


        :param optimizer: The optimizer of this ParameterList.
        :type optimizer: List[str]
        """

        self._optimizer = optimizer

    @property
    def momentum(self) -> List[float]:
        """Gets the momentum of this ParameterList.


        :return: The momentum of this ParameterList.
        :rtype: List[float]
        """
        return self._momentum

    @momentum.setter
    def momentum(self, momentum: List[float]):
        """Sets the momentum of this ParameterList.


        :param momentum: The momentum of this ParameterList.
        :type momentum: List[float]
        """

        self._momentum = momentum

    @property
    def random_weights_dict(self) -> List[RandomFunction]:
        """Gets the random_weights_dict of this ParameterList.


        :return: The random_weights_dict of this ParameterList.
        :rtype: List[RandomFunction]
        """
        return self._random_weights_dict

    @random_weights_dict.setter
    def random_weights_dict(self, random_weights_dict: List[RandomFunction]):
        """Sets the random_weights_dict of this ParameterList.


        :param random_weights_dict: The random_weights_dict of this ParameterList.
        :type random_weights_dict: List[RandomFunction]
        """

        self._random_weights_dict = random_weights_dict

    @property
    def random_biases_dict(self) -> List[RandomFunction]:
        """Gets the random_biases_dict of this ParameterList.


        :return: The random_biases_dict of this ParameterList.
        :rtype: List[RandomFunction]
        """
        return self._random_biases_dict

    @random_biases_dict.setter
    def random_biases_dict(self, random_biases_dict: List[RandomFunction]):
        """Sets the random_biases_dict of this ParameterList.


        :param random_biases_dict: The random_biases_dict of this ParameterList.
        :type random_biases_dict: List[RandomFunction]
        """

        self._random_biases_dict = random_biases_dict

    @property
    def session_saver_path(self) -> str:
        """Gets the session_saver_path of this ParameterList.


        :return: The session_saver_path of this ParameterList.
        :rtype: str
        """
        return self._session_saver_path

    @session_saver_path.setter
    def session_saver_path(self, session_saver_path: str):
        """Sets the session_saver_path of this ParameterList.


        :param session_saver_path: The session_saver_path of this ParameterList.
        :type session_saver_path: str
        """

        self._session_saver_path = session_saver_path

    @property
    def load_prev_session(self) -> bool:
        """Gets the load_prev_session of this ParameterList.


        :return: The load_prev_session of this ParameterList.
        :rtype: bool
        """
        return self._load_prev_session

    @load_prev_session.setter
    def load_prev_session(self, load_prev_session: bool):
        """Sets the load_prev_session of this ParameterList.


        :param load_prev_session: The load_prev_session of this ParameterList.
        :type load_prev_session: bool
        """

        self._load_prev_session = load_prev_session

    @property
    def session_save_duration(self) -> List[int]:
        """Gets the session_save_duration of this ParameterList.


        :return: The session_save_duration of this ParameterList.
        :rtype: List[int]
        """
        return self._session_save_duration

    @session_save_duration.setter
    def session_save_duration(self, session_save_duration: List[int]):
        """Sets the session_save_duration of this ParameterList.


        :param session_save_duration: The session_save_duration of this ParameterList.
        :type session_save_duration: List[int]
        """

        self._session_save_duration = session_save_duration

    @property
    def num_test_pictures(self) -> List[int]:
        """Gets the num_test_pictures of this ParameterList.


        :return: The num_test_pictures of this ParameterList.
        :rtype: List[int]
        """
        return self._num_test_pictures

    @num_test_pictures.setter
    def num_test_pictures(self, num_test_pictures: List[int]):
        """Sets the num_test_pictures of this ParameterList.


        :param num_test_pictures: The num_test_pictures of this ParameterList.
        :type num_test_pictures: List[int]
        """

        self._num_test_pictures = num_test_pictures
