# coding: utf-8

from __future__ import absolute_import

from typing import List  # noqa: F401

from flask_server.swagger_server import util
from flask_server.swagger_server.models.base_model_ import Model
from flask_server.swagger_server.models.image import Image  # noqa: F401,E501


class ImageData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, num_images: int = None, res_x: int = None, res_y: int = None,
                 images: List[Image] = None):  # noqa: E501
        """ImageData - a model defined in Swagger

        :param num_images: The num_images of this ImageData.  # noqa: E501
        :type num_images: int
        :param res_x: The res_x of this ImageData.  # noqa: E501
        :type res_x: int
        :param res_y: The res_y of this ImageData.  # noqa: E501
        :type res_y: int
        :param images: The images of this ImageData.  # noqa: E501
        :type images: List[Image]
        """
        self.swagger_types = {
            'num_images': int,
            'res_x': int,
            'res_y': int,
            'images': List[Image]
        }

        self.attribute_map = {
            'num_images': 'numImages',
            'res_x': 'resX',
            'res_y': 'resY',
            'images': 'images'
        }

        self._num_images = num_images
        self._res_x = res_x
        self._res_y = res_y
        self._images = images

    @classmethod
    def from_dict(cls, dikt) -> 'ImageData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ImageData of this ImageData.  # noqa: E501
        :rtype: ImageData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_images(self) -> int:
        """Gets the num_images of this ImageData.


        :return: The num_images of this ImageData.
        :rtype: int
        """
        return self._num_images

    @num_images.setter
    def num_images(self, num_images: int):
        """Sets the num_images of this ImageData.


        :param num_images: The num_images of this ImageData.
        :type num_images: int
        """

        self._num_images = num_images

    @property
    def res_x(self) -> int:
        """Gets the res_x of this ImageData.


        :return: The res_x of this ImageData.
        :rtype: int
        """
        return self._res_x

    @res_x.setter
    def res_x(self, res_x: int):
        """Sets the res_x of this ImageData.


        :param res_x: The res_x of this ImageData.
        :type res_x: int
        """

        self._res_x = res_x

    @property
    def res_y(self) -> int:
        """Gets the res_y of this ImageData.


        :return: The res_y of this ImageData.
        :rtype: int
        """
        return self._res_y

    @res_y.setter
    def res_y(self, res_y: int):
        """Sets the res_y of this ImageData.


        :param res_y: The res_y of this ImageData.
        :type res_y: int
        """

        self._res_y = res_y

    @property
    def images(self) -> List[Image]:
        """Gets the images of this ImageData.


        :return: The images of this ImageData.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images: List[Image]):
        """Sets the images of this ImageData.


        :param images: The images of this ImageData.
        :type images: List[Image]
        """

        self._images = images
