---
swagger: "2.0"
info:
  description: "WebUI to build, train and tune a Convolutional Autoencoder"
  version: "1.1.2"
  title: "Convolutional Autoencoder"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "leon.schuetz@student.uni-tuebingen.de"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v2"
tags:
- name: "load"
  description: "All methods corresponding to the input data"
- name: "build"
  description: "All methods corresponding to the learning parameters"
- name: "train"
  description: "All methods corresponding to the CAE training"
- name: "visualize"
  description: "All methods corresponding to the CAE visualisation"
- name: "tune"
  description: "All methods corresponding to the CAE parameter tuning"
schemes:
- "http"
paths:
  /load/getAvailableDataSets:
    post:
      tags:
      - "load"
      summary: "get available data sets"
      description: "returns a list of available data set files"
      operationId: "get_available_data_sets"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "set of filenames successfully returned"
          schema:
            type: "array"
            items:
              type: "string"
        404:
          description: "Directory not found"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/uploadFile:
    post:
      tags:
      - "load"
      summary: "uploads a data file"
      description: "Load a data file in different data formats"
      operationId: "upload_file"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "upfile"
        in: "formData"
        description: "The file to upload."
        required: true
        type: "file"
      responses:
        200:
          description: "file successful loaded"
        404:
          description: "File not found"
        415:
          description: "File parsing error"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/loadFile:
    post:
      tags:
      - "load"
      summary: "Load a train/test data file"
      description: "Load a data file in different data formats"
      operationId: "load_file"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "filename"
        in: "query"
        required: true
        type: "string"
        default: "data/mnist_train_data.npy"
        format: "string"
      - name: "datasetname"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        default: "train_data"
        format: "string"
      - name: "read_labels"
        in: "query"
        description: "true to read labels"
        required: false
        type: "boolean"
        default: false
      - name: "data_type"
        in: "query"
        description: "determines the data format of the input file"
        required: false
        type: "string"
        default: "auto"
        format: "string"
      responses:
        200:
          description: "file successful loaded"
        404:
          description: "File not found"
        415:
          description: "File parsing error"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/getImages:
    get:
      tags:
      - "load"
      summary: "returns a subset of input/output images"
      description: "images are encoded as png byte strings"
      operationId: "get_images"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "start_idx"
        in: "query"
        description: "name for dataset on the server"
        required: true
        type: "integer"
        default: 0
        format: "int32"
      - name: "end_idx"
        in: "query"
        description: "name for dataset on the server"
        required: true
        type: "integer"
        default: 10
        format: "int32"
      - name: "datasetname"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        default: "train_data"
        format: "string"
      - name: "sort_by"
        in: "query"
        description: "defines the sorting of the input images"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "the values which should be filtered (whitelist)"
        required: false
        type: "string"
      - name: "output"
        in: "query"
        description: "if true returns AE output Images instead of input Images"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "Images successfully returned"
          schema:
            $ref: "#/definitions/ImageData"
        404:
          description: "No data found"
        415:
          description: "Index out of bounds"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/resetAllBatchIndices:
    post:
      tags:
      - "load"
      summary: "resets all batch indices of all image sets"
      description: "resets all batch indices of all image sets"
      operationId: "reset_all_batch_indices"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "All batch indices reset"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/resetBatchIndex:
    post:
      tags:
      - "load"
      summary: "resets the batch index of the image set"
      description: "resets the batch index of the image set"
      operationId: "reset_batch_index"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "dataset_name"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        default: "train_data"
      - name: "output"
        in: "query"
        description: "reset output image batch index instead of input images"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "Batch index reset"
        404:
          description: "dataset not found"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/getImageBatch:
    get:
      tags:
      - "load"
      summary: "returns the next batch of input/output images"
      description: "images are encoded as png byte strings"
      operationId: "get_image_batch"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "batch_size"
        in: "query"
        description: "defines the number of return images"
        required: false
        type: "integer"
        default: 100
        format: "int32"
      - name: "datasetname"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        default: "train_data"
        format: "string"
      - name: "sort_by"
        in: "query"
        description: "defines the sorting of the input images"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "the values which should be filtered (whitelist)"
        required: false
        type: "string"
      - name: "output"
        in: "query"
        description: "if true returns AE output Images instead of input Images"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "Images successfully returned"
          schema:
            $ref: "#/definitions/ImageData"
        404:
          description: "No data found"
        415:
          description: "Index out of bounds"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/getRandomImages:
    get:
      tags:
      - "load"
      summary: "returns the next batch of input/output images"
      description: "images are encoded as png byte strings"
      operationId: "get_random_images"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "batch_size"
        in: "query"
        description: "defines the number of return images"
        required: false
        type: "integer"
        default: 100
        format: "int32"
      - name: "datasetname"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        default: "train_data"
        format: "string"
      - name: "sort_by"
        in: "query"
        description: "defines the sorting of the input images"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "the values which should be filtered (whitelist)"
        required: false
        type: "string"
      - name: "output"
        in: "query"
        description: "if true returns AE output Images instead of input Images"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "Images successfully returned"
          schema:
            $ref: "#/definitions/ImageData"
        404:
          description: "No data found"
        415:
          description: "Index out of bounds"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/getImageById:
    get:
      tags:
      - "load"
      summary: "returns a single input/output image"
      description: "images are encoded as png byte strings"
      operationId: "get_image_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "defines the id of the images"
        required: true
        type: "integer"
        format: "int32"
      - name: "datasetname"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        default: "train_data"
        format: "string"
      - name: "sort_by"
        in: "query"
        description: "defines the sorting of the input images"
        required: false
        type: "string"
      - name: "filter"
        in: "query"
        description: "the values which should be filtered (whitelist)"
        required: false
        type: "string"
      - name: "output"
        in: "query"
        description: "if true returns AE output Images instead of input Images"
        required: false
        type: "boolean"
        default: false
      responses:
        200:
          description: "Images successfully returned"
          schema:
            $ref: "#/definitions/ImageData"
        404:
          description: "No data found"
        415:
          description: "Index out of bounds"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /load/getLatentRepresentationById:
    get:
      tags:
      - "load"
      summary: "returns a single latent representation as ()list of) png images"
      description: "images are encoded as png byte strings"
      operationId: "get_latent_representation_by_id"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "defines the id of the images"
        required: true
        type: "integer"
        format: "int32"
      - name: "datasetname"
        in: "query"
        description: "name for dataset on the server"
        required: false
        type: "string"
        default: "train_data"
        format: "string"
      responses:
        200:
          description: "Images successfully returned"
          schema:
            $ref: "#/definitions/ImageData"
        404:
          description: "No data found"
        415:
          description: "Index out of bounds"
      x-swagger-router-controller: "swagger_server.controllers.load_controller"
  /build/getInputShape:
    get:
      tags:
      - "build"
      summary: "returns the input shape of the train data"
      description: "returns the input shape of the train data"
      operationId: "get_input_shape"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "dataset_name"
        in: "query"
        description: "name of the dataset"
        required: false
        type: "string"
        default: "train_data"
      responses:
        202:
          description: "Input shape"
          schema:
            type: "array"
            items:
              type: "integer"
              format: "int32"
        404:
          description: "Dataset not found"
      x-swagger-router-controller: "swagger_server.controllers.build_controller"
  /build/buildANN:
    post:
      tags:
      - "build"
      summary: "passes all learning and ANN parameters to the server"
      description: "Includes learning parameters and ANN topology"
      operationId: "build_ann"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "inputParameters"
        description: "object with all tunable parameters"
        required: true
        schema:
          $ref: "#/definitions/ParameterList"
      responses:
        202:
          description: "Parameters successfully committed"
        415:
          description: "File parsing error"
      x-swagger-router-controller: "swagger_server.controllers.build_controller"
  /build/getANNParameter:
    get:
      tags:
      - "build"
      summary: "returns the parameter set of the created ANN"
      description: "returns a object of type ParameterList"
      operationId: "get_ann_parameter"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Parameters successfully returned"
          schema:
            $ref: "#/definitions/ParameterList"
        404:
          description: "Ressource not found"
      x-swagger-router-controller: "swagger_server.controllers.build_controller"
  /train/controlTraining:
    post:
      tags:
      - "train"
      summary: "starts, pauses and stops the training"
      description: "uses a string enum"
      operationId: "control_training"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "trainStatus"
        description: "new status for training"
        required: true
        schema:
          $ref: "#/definitions/TrainStatus"
      responses:
        200:
          description: "Train status updated"
      x-swagger-router-controller: "swagger_server.controllers.train_controller"
  /train/getProcessedImageData:
    get:
      tags:
      - "train"
      summary: "returns a subset of the current train images and the corresponding\
        \ latent representation and output"
      description: ""
      operationId: "get_processed_image_data"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "setSize"
        in: "query"
        description: "size of the image subset"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Train images updated"
          schema:
            $ref: "#/definitions/ProcessedImageData"
      x-swagger-router-controller: "swagger_server.controllers.train_controller"
  /train/getTrainPerformance:
    get:
      tags:
      - "train"
      summary: "returns the next batch of scalar train variables"
      description: "as list of dicts"
      operationId: "get_train_performance"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Train status recieved"
          schema:
            $ref: "#/definitions/TrainPerformance"
      x-swagger-router-controller: "swagger_server.controllers.train_controller"
  /visualize/getHiddenLayerLatentClustering:
    get:
      tags:
      - "visualize"
      summary: "returns the clustering of the latent representation of a hidden layer"
      description: "returns the clustering of the latent representation of a hidden\
        \ layer"
      operationId: "get_hidden_layer_latent_clustering"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "algorithm"
        in: "query"
        description: "determines the clutering algorithm"
        required: false
        type: "string"
      - name: "dataset_name"
        in: "query"
        description: "determines the dataset which should be clustered"
        required: false
        type: "string"
        default: "train_data"
      - name: "dimension_reduction"
        in: "query"
        description: "determines the algorithm for dim reduction"
        required: false
        type: "string"
      - in: "body"
        name: "cluster_parameters"
        description: "determines the clutering parameters"
        required: false
        schema:
          $ref: "#/definitions/ClusterParameters"
      - name: "layer"
        in: "query"
        description: "determines the hidden layer"
        required: false
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Operation successful"
          schema:
            $ref: "#/definitions/Clustering"
      x-swagger-router-controller: "swagger_server.controllers.visualize_controller"
  /visualize/generateImageFromSinglePoint:
    get:
      tags:
      - "visualize"
      summary: "generates the AE output from a given point of the sample distribution"
      description: ""
      operationId: "generate_image_from_single_point"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "point_2D"
        description: "2D Point of the sample distribution"
        required: true
        schema:
          $ref: "#/definitions/Point2D"
      responses:
        200:
          description: "Operation successful"
          schema:
            $ref: "#/definitions/Image"
      x-swagger-router-controller: "swagger_server.controllers.visualize_controller"
  /tune/buildGridSearchANN:
    post:
      tags:
      - "tune"
      summary: "passes all learning and ANN parameters to the server"
      description: "Includes learning parameters and ANN topology as lists"
      operationId: "build_grid_search_ann"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "inputParameterLists"
        description: "object with all tunable parameter lists"
        required: true
        schema:
          $ref: "#/definitions/ParameterList"
      responses:
        202:
          description: "Parameters successfully commited"
        415:
          description: "File parsing error"
      x-swagger-router-controller: "swagger_server.controllers.tune_controller"
  /tune/controlTuning:
    post:
      tags:
      - "tune"
      summary: "starts, pauses and stops the tuning"
      description: "uses a string enum"
      operationId: "control_tuning"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "trainStatus"
        description: "new status for training"
        required: true
        schema:
          $ref: "#/definitions/TrainStatus"
      responses:
        200:
          description: "Train status updated"
      x-swagger-router-controller: "swagger_server.controllers.tune_controller"
  /tune/getProcessedImageDataOfCurrentTuning:
    get:
      tags:
      - "tune"
      summary: "returns a subset of the current train images and the corresponding\
        \ latent representation and output"
      description: ""
      operationId: "get_processed_image_data_of_current_tuning"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "setSize"
        in: "query"
        description: "size of the image subset"
        required: true
        type: "integer"
        format: "int32"
      responses:
        200:
          description: "Train images updated"
          schema:
            $ref: "#/definitions/ProcessedImageData"
      x-swagger-router-controller: "swagger_server.controllers.tune_controller"
  /tune/getTrainPerformanceOfCurrentTuning:
    get:
      tags:
      - "tune"
      summary: "returns the next batch of scalar train variables"
      description: "as list of dicts"
      operationId: "get_train_performance_of_current_tuning"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Train status recieved"
          schema:
            $ref: "#/definitions/TrainPerformance"
      x-swagger-router-controller: "swagger_server.controllers.tune_controller"
  /tune/getTuneParameter:
    get:
      tags:
      - "tune"
      summary: "returns the parameter set of the ANN with the given model id"
      description: "returns a object of type ParameterList"
      operationId: "get_tune_parameter"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "modelId"
        in: "query"
        description: "model id of the exspected parameter set"
        required: true
        type: "string"
      responses:
        200:
          description: "Parameters successfully returned"
          schema:
            $ref: "#/definitions/ParameterList"
        404:
          description: "Ressource not found"
      x-swagger-router-controller: "swagger_server.controllers.tune_controller"
  /tune/getProcessedImageDataOfSpecificTuning:
    get:
      tags:
      - "tune"
      summary: "returns a subset of the current train images and the corresponding\
        \ latent representation and output"
      description: ""
      operationId: "get_processed_image_data_of_specific_tuning"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "setSize"
        in: "query"
        description: "size of the image subset"
        required: true
        type: "integer"
        format: "int32"
      - name: "modelId"
        in: "query"
        description: "model id of the exspected parameter set"
        required: true
        type: "string"
      responses:
        200:
          description: "Train images updated"
          schema:
            $ref: "#/definitions/ProcessedImageData"
      x-swagger-router-controller: "swagger_server.controllers.tune_controller"
  /tune/getTrainPerformanceOfSpecificTuning:
    get:
      tags:
      - "tune"
      summary: "returns the complete set of scalar train variables to a given model"
      description: "as list of dicts"
      operationId: "get_train_performance_of_specific_tuning"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "modelId"
        in: "query"
        description: "model id of the exspected parameter set"
        required: true
        type: "string"
      responses:
        200:
          description: "Train status recieved"
          schema:
            $ref: "#/definitions/TrainPerformance"
      x-swagger-router-controller: "swagger_server.controllers.tune_controller"
definitions:
  ImageData:
    type: "object"
    properties:
      numImages:
        type: "integer"
        format: "int64"
      resX:
        type: "integer"
        format: "int32"
      resY:
        type: "integer"
        format: "int32"
      images:
        type: "array"
        items:
          $ref: "#/definitions/Image"
    example:
      images:
      - bytestring: "bytestring"
        id: 5
      - bytestring: "bytestring"
        id: 5
      numImages: 0
      resY: 1
      resX: 6
  ClusterParameters:
    type: "object"
    properties:
      n_clusters:
        type: "integer"
        format: "int32"
        example: 10
      init:
        type: "string"
        example: "k-means++"
      n_init:
        type: "integer"
        format: "int32"
        example: 10
      max_iter:
        type: "integer"
        format: "int32"
        example: 300
      tol:
        type: "number"
        format: "float"
        example: 1.0E-4
      precompute_distances:
        type: "string"
        example: "auto"
      verbose:
        type: "integer"
        format: "int32"
        example: 0
      random_state:
        type: "integer"
        format: "int32"
        example: -1
      copy_x:
        type: "boolean"
        example: true
      n_jobs:
        type: "integer"
        format: "int32"
        example: -1
      algorithm:
        type: "string"
        example: "auto"
    example:
      n_clusters: 10
      n_init: 10
      tol: 1.0E-4
      init: "k-means++"
      n_jobs: -1
      random_state: -1
      max_iter: 300
      copy_x: true
      precompute_distances: "auto"
      verbose: 0
      algorithm: "auto"
  Clustering:
    type: "object"
    properties:
      minX:
        type: "number"
        format: "float"
      maxX:
        type: "number"
        format: "float"
      minY:
        type: "number"
        format: "float"
      maxY:
        type: "number"
        format: "float"
      nClusters:
        type: "integer"
        format: "int32"
      points:
        type: "array"
        items:
          $ref: "#/definitions/Point2D"
    example:
      minY: 1.4658129
      minX: 0.8008282
      maxY: 5.962134
      maxX: 6.0274563
      nClusters: 5
      points:
      - cluster: 9
        x: 2.302136
        y: 7.0614014
      - cluster: 9
        x: 2.302136
        y: 7.0614014
  Point2D:
    type: "object"
    properties:
      x:
        type: "number"
        format: "float"
      y:
        type: "number"
        format: "float"
      cluster:
        type: "integer"
        format: "int32"
    example:
      cluster: 9
      x: 2.302136
      y: 7.0614014
  TrainStatus:
    type: "string"
    example: "start"
    enum:
    - "start"
    - "pause"
    - "stop"
    - "resume"
  Image:
    type: "object"
    properties:
      bytestring:
        type: "string"
      id:
        type: "integer"
        format: "int32"
    example:
      bytestring: "bytestring"
      id: 5
  ParameterList:
    type: "object"
    properties:
      input_shape:
        type: "array"
        example:
        - - -1
          - 28
          - 28
          - 1
        items:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      number_of_stacks:
        type: "array"
        example:
        - - 12
          - 10
          - 10
          - 6
        items:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      filter_sizes:
        type: "array"
        example:
        - - 3
          - 3
          - 2
          - 2
        items:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      mirror_weights:
        type: "array"
        example:
        - false
        items:
          type: "boolean"
      activation_function:
        type: "array"
        example:
        - "relu"
        items:
          type: "string"
      batch_size:
        type: "array"
        example:
        - 100
        items:
          type: "integer"
          format: "int32"
      n_epochs:
        type: "array"
        example:
        - 50
        items:
          type: "integer"
          format: "int32"
      use_tensorboard:
        type: "boolean"
        example: true
        default: true
      verbose:
        type: "boolean"
        example: true
        default: true
      learning_rate_dict:
        type: "array"
        items:
          $ref: "#/definitions/LearningRate"
      cost_function_dict:
        type: "array"
        items:
          $ref: "#/definitions/CostFunction"
      optimizer:
        type: "array"
        example:
        - "AdamOptimizer"
        items:
          type: "string"
      momentum:
        type: "array"
        example:
        - 0.9
        items:
          type: "number"
          format: "double"
      random_weights_dict:
        type: "array"
        items:
          $ref: "#/definitions/RandomFunction"
      random_biases_dict:
        type: "array"
        items:
          $ref: "#/definitions/RandomFunction"
      session_saver_path:
        type: "string"
        example: "./save/"
        default: "./save/"
      load_prev_session:
        type: "boolean"
        example: false
        default: false
      session_save_duration:
        type: "array"
        example:
        - 5
        items:
          type: "integer"
          format: "int32"
      num_test_pictures:
        type: "array"
        example:
        - 100
        items:
          type: "integer"
          format: "int32"
    example:
      load_prev_session: false
      number_of_stacks:
      - - 12
        - 10
        - 10
        - 6
      batch_size:
      - 100
      learning_rate_dict:
      - lr_cycle:
        - false
        lr_values:
        - - 1
          - 0.5
          - 0.1
        lr_initial_learning_rate:
        - 0.01
        lr_boundaries:
        - - 10000
          - 20000
        lr_decay_rate:
        - 0.9
        lr_power:
        - 1
        learning_rate_function: "static"
        lr_decay_steps:
        - 1000
        lr_staircase:
        - false
        lr_end_learning_rate:
        - 1.0E-4
      - lr_cycle:
        - false
        lr_values:
        - - 1
          - 0.5
          - 0.1
        lr_initial_learning_rate:
        - 0.01
        lr_boundaries:
        - - 10000
          - 20000
        lr_decay_rate:
        - 0.9
        lr_power:
        - 1
        learning_rate_function: "static"
        lr_decay_steps:
        - 1000
        lr_staircase:
        - false
        lr_end_learning_rate:
        - 1.0E-4
      input_shape:
      - - -1
        - 28
        - 28
        - 1
      random_biases_dict:
      - maxval:
        - 1
        minval:
        - 0
        seed:
        - -1
        mean:
        - 0
        random_function: "uniform"
        alpha:
        - 0.5
        lam:
        - 0.5
        stddev:
        - 1
        beta:
        - 1
      - maxval:
        - 1
        minval:
        - 0
        seed:
        - -1
        mean:
        - 0
        random_function: "uniform"
        alpha:
        - 0.5
        lam:
        - 0.5
        stddev:
        - 1
        beta:
        - 1
      mirror_weights:
      - false
      random_weights_dict:
      - maxval:
        - 1
        minval:
        - 0
        seed:
        - -1
        mean:
        - 0
        random_function: "uniform"
        alpha:
        - 0.5
        lam:
        - 0.5
        stddev:
        - 1
        beta:
        - 1
      - maxval:
        - 1
        minval:
        - 0
        seed:
        - -1
        mean:
        - 0
        random_function: "uniform"
        alpha:
        - 0.5
        lam:
        - 0.5
        stddev:
        - 1
        beta:
        - 1
      verbose: true
      momentum:
      - 0.9
      use_tensorboard: true
      session_save_duration:
      - 5
      num_test_pictures:
      - 100
      n_epochs:
      - 50
      optimizer:
      - "AdamOptimizer"
      cost_function_dict:
      - cf_filter_sigma:
        - 1.5
        cf_k1:
        - 0.01
        cf_k2:
        - 0.03
        cf_cost_function: "squared_pixel_distance"
        cf_max_val:
        - 255
        cf_filter_size:
        - 11
        cf_weights:
        - - 0
      - cf_filter_sigma:
        - 1.5
        cf_k1:
        - 0.01
        cf_k2:
        - 0.03
        cf_cost_function: "squared_pixel_distance"
        cf_max_val:
        - 255
        cf_filter_size:
        - 11
        cf_weights:
        - - 0
      filter_sizes:
      - - 3
        - 3
        - 2
        - 2
      session_saver_path: "./save/"
      activation_function:
      - "relu"
  LearningRate:
    type: "object"
    properties:
      learning_rate_function:
        type: "string"
        example: "static"
        default: "static"
      lr_initial_learning_rate:
        type: "array"
        example:
        - 0.01
        items:
          type: "number"
          format: "double"
      lr_decay_steps:
        type: "array"
        example:
        - 1000
        items:
          type: "integer"
          format: "int32"
      lr_decay_rate:
        type: "array"
        example:
        - 0.9
        items:
          type: "number"
          format: "double"
      lr_staircase:
        type: "array"
        example:
        - false
        items:
          type: "boolean"
      lr_boundaries:
        type: "array"
        example:
        - - 10000
          - 20000
        items:
          type: "array"
          items:
            type: "integer"
            format: "int32"
      lr_values:
        type: "array"
        example:
        - - 1
          - 0.5
          - 0.1
        items:
          type: "array"
          items:
            type: "number"
            format: "double"
      lr_end_learning_rate:
        type: "array"
        example:
        - 1.0E-4
        items:
          type: "number"
          format: "double"
      lr_power:
        type: "array"
        example:
        - 1
        items:
          type: "number"
          format: "double"
      lr_cycle:
        type: "array"
        example:
        - false
        items:
          type: "boolean"
    example:
      lr_cycle:
      - false
      lr_values:
      - - 1
        - 0.5
        - 0.1
      lr_initial_learning_rate:
      - 0.01
      lr_boundaries:
      - - 10000
        - 20000
      lr_decay_rate:
      - 0.9
      lr_power:
      - 1
      learning_rate_function: "static"
      lr_decay_steps:
      - 1000
      lr_staircase:
      - false
      lr_end_learning_rate:
      - 1.0E-4
  CostFunction:
    type: "object"
    properties:
      cf_cost_function:
        type: "string"
        example: "squared_pixel_distance"
        default: "squared_pixel_distance"
      cf_max_val:
        type: "array"
        example:
        - 255
        items:
          type: "number"
          format: "float"
      cf_filter_size:
        type: "array"
        example:
        - 11
        items:
          type: "number"
          format: "int32"
      cf_filter_sigma:
        type: "array"
        example:
        - 1.5
        items:
          type: "number"
          format: "float"
      cf_k1:
        type: "array"
        example:
        - 0.01
        items:
          type: "number"
          format: "float"
      cf_k2:
        type: "array"
        example:
        - 0.03
        items:
          type: "number"
          format: "float"
      cf_weights:
        type: "array"
        example:
        - - 0
        items:
          type: "array"
          items:
            type: "number"
            format: "float"
    example:
      cf_filter_sigma:
      - 1.5
      cf_k1:
      - 0.01
      cf_k2:
      - 0.03
      cf_cost_function: "squared_pixel_distance"
      cf_max_val:
      - 255
      cf_filter_size:
      - 11
      cf_weights:
      - - 0
  RandomFunction:
    type: "object"
    properties:
      random_function:
        type: "string"
        example: "uniform"
      alpha:
        type: "array"
        example:
        - 0.5
        items:
          type: "number"
          format: "double"
      beta:
        type: "array"
        example:
        - 1
        items:
          type: "number"
          format: "double"
      mean:
        type: "array"
        example:
        - 0
        items:
          type: "number"
          format: "double"
      stddev:
        type: "array"
        example:
        - 1
        items:
          type: "number"
          format: "double"
      lam:
        type: "array"
        example:
        - 0.5
        items:
          type: "number"
          format: "double"
      minval:
        type: "array"
        example:
        - 0
        items:
          type: "number"
          format: "double"
      maxval:
        type: "array"
        example:
        - 1
        items:
          type: "number"
          format: "double"
      seed:
        type: "array"
        example:
        - -1
        items:
          type: "integer"
          format: "int32"
    example:
      maxval:
      - 1
      minval:
      - 0
      seed:
      - -1
      mean:
      - 0
      random_function: "uniform"
      alpha:
      - 0.5
      lam:
      - 0.5
      stddev:
      - 1
      beta:
      - 1
  ProcessedImageData:
    type: "object"
    properties:
      epoch:
        type: "number"
        format: "int32"
      step:
        type: "number"
        format: "int32"
      inputLayer:
        type: "array"
        items:
          $ref: "#/definitions/Image"
      latentLayer:
        type: "array"
        items:
          type: "array"
          items:
            $ref: "#/definitions/Image"
      outputLayer:
        type: "array"
        items:
          $ref: "#/definitions/Image"
    example:
      latentLayer:
      - - bytestring: "bytestring"
          id: 5
        - bytestring: "bytestring"
          id: 5
      - - bytestring: "bytestring"
          id: 5
        - bytestring: "bytestring"
          id: 5
      inputLayer:
      - bytestring: "bytestring"
        id: 5
      - bytestring: "bytestring"
        id: 5
      outputLayer:
      - bytestring: "bytestring"
        id: 5
      - bytestring: "bytestring"
        id: 5
      epoch: 0.80082819046101150206595775671303272247314453125
      step: 6.02745618307040320615897144307382404804229736328125
  TrainPerformance:
    type: "object"
    properties:
      model_id:
        type: "string"
      train_status:
        type: "string"
      train_performance_data:
        type: "array"
        items:
          $ref: "#/definitions/TrainPerformanceDataPoint"
    example:
      train_status: "train_status"
      model_id: "model_id"
      train_performance_data:
      - cost: 1.46581298050294517310021547018550336360931396484375
        currentLearningRate: 5.962133916683182377482808078639209270477294921875
        epoch: 0.80082819046101150206595775671303272247314453125
        step: 6.02745618307040320615897144307382404804229736328125
      - cost: 1.46581298050294517310021547018550336360931396484375
        currentLearningRate: 5.962133916683182377482808078639209270477294921875
        epoch: 0.80082819046101150206595775671303272247314453125
        step: 6.02745618307040320615897144307382404804229736328125
  TrainPerformanceDataPoint:
    type: "object"
    properties:
      epoch:
        type: "number"
        format: "int32"
      step:
        type: "number"
        format: "int32"
      cost:
        type: "number"
        format: "double"
      currentLearningRate:
        type: "number"
        format: "double"
    example:
      cost: 1.46581298050294517310021547018550336360931396484375
      currentLearningRate: 5.962133916683182377482808078639209270477294921875
      epoch: 0.80082819046101150206595775671303272247314453125
      step: 6.02745618307040320615897144307382404804229736328125
