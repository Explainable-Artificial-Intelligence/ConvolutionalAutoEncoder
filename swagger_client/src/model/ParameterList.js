/**
 * Convolutional Autoencoder
 * WebUI to build, train and tune a Convolutional Autoencoder
 *
 * OpenAPI spec version: 1.1.1
 * Contact: leon.schuetz@student.uni-tuebingen.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
      define(['ApiClient', 'model/CostFunction', 'model/LearningRate', 'model/RandomFunction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
      module.exports = factory(require('../ApiClient'), require('./CostFunction'), require('./LearningRate'), require('./RandomFunction'));
  } else {
    // Browser globals (root is window)
    if (!root.ConvolutionalAutoencoder) {
      root.ConvolutionalAutoencoder = {};
    }
      root.ConvolutionalAutoencoder.ParameterList = factory(root.ConvolutionalAutoencoder.ApiClient, root.ConvolutionalAutoencoder.CostFunction, root.ConvolutionalAutoencoder.LearningRate, root.ConvolutionalAutoencoder.RandomFunction);
  }
}(this, function (ApiClient, CostFunction, LearningRate, RandomFunction) {
  'use strict';




  /**
   * The ParameterList model module.
   * @module model/ParameterList
   * @version 1.1.1
   */

  /**
   * Constructs a new <code>ParameterList</code>.
   * @alias module:model/ParameterList
   * @class
   */
  var exports = function() {
    var _this = this;


  };

  /**
   * Constructs a <code>ParameterList</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ParameterList} obj Optional instance to populate.
   * @return {module:model/ParameterList} The populated <code>ParameterList</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('input_shape')) {
        obj['input_shape'] = ApiClient.convertToType(data['input_shape'], [['Number']]);
      }
      if (data.hasOwnProperty('number_of_stacks')) {
        obj['number_of_stacks'] = ApiClient.convertToType(data['number_of_stacks'], [['Number']]);
      }
      if (data.hasOwnProperty('filter_sizes')) {
        obj['filter_sizes'] = ApiClient.convertToType(data['filter_sizes'], [['Number']]);
      }
      if (data.hasOwnProperty('mirror_weights')) {
        obj['mirror_weights'] = ApiClient.convertToType(data['mirror_weights'], ['Boolean']);
      }
      if (data.hasOwnProperty('activation_function')) {
        obj['activation_function'] = ApiClient.convertToType(data['activation_function'], ['String']);
      }
      if (data.hasOwnProperty('batch_size')) {
        obj['batch_size'] = ApiClient.convertToType(data['batch_size'], ['Number']);
      }
      if (data.hasOwnProperty('n_epochs')) {
        obj['n_epochs'] = ApiClient.convertToType(data['n_epochs'], ['Number']);
      }
      if (data.hasOwnProperty('use_tensorboard')) {
        obj['use_tensorboard'] = ApiClient.convertToType(data['use_tensorboard'], 'Boolean');
      }
      if (data.hasOwnProperty('verbose')) {
        obj['verbose'] = ApiClient.convertToType(data['verbose'], 'Boolean');
      }
        if (data.hasOwnProperty('learning_rate_dict')) {
            obj['learning_rate_dict'] = ApiClient.convertToType(data['learning_rate_dict'], [LearningRate]);
      }
        if (data.hasOwnProperty('cost_function_dict')) {
            obj['cost_function_dict'] = ApiClient.convertToType(data['cost_function_dict'], [CostFunction]);
      }
      if (data.hasOwnProperty('optimizer')) {
        obj['optimizer'] = ApiClient.convertToType(data['optimizer'], ['String']);
      }
      if (data.hasOwnProperty('momentum')) {
        obj['momentum'] = ApiClient.convertToType(data['momentum'], ['Number']);
      }
        if (data.hasOwnProperty('random_weights_dict')) {
            obj['random_weights_dict'] = ApiClient.convertToType(data['random_weights_dict'], [RandomFunction]);
      }
        if (data.hasOwnProperty('random_biases_dict')) {
            obj['random_biases_dict'] = ApiClient.convertToType(data['random_biases_dict'], [RandomFunction]);
      }
      if (data.hasOwnProperty('session_saver_path')) {
        obj['session_saver_path'] = ApiClient.convertToType(data['session_saver_path'], 'String');
      }
      if (data.hasOwnProperty('load_prev_session')) {
        obj['load_prev_session'] = ApiClient.convertToType(data['load_prev_session'], 'Boolean');
      }
      if (data.hasOwnProperty('session_save_duration')) {
        obj['session_save_duration'] = ApiClient.convertToType(data['session_save_duration'], ['Number']);
      }
      if (data.hasOwnProperty('num_test_pictures')) {
        obj['num_test_pictures'] = ApiClient.convertToType(data['num_test_pictures'], ['Number']);
      }
    }
    return obj;
  }

  /**
   * @member {Array.<Array.<Number>>} input_shape
   */
  exports.prototype['input_shape'] = undefined;
  /**
   * @member {Array.<Array.<Number>>} number_of_stacks
   */
  exports.prototype['number_of_stacks'] = undefined;
  /**
   * @member {Array.<Array.<Number>>} filter_sizes
   */
  exports.prototype['filter_sizes'] = undefined;
  /**
   * @member {Array.<Boolean>} mirror_weights
   */
  exports.prototype['mirror_weights'] = undefined;
  /**
   * @member {Array.<String>} activation_function
   */
  exports.prototype['activation_function'] = undefined;
  /**
   * @member {Array.<Number>} batch_size
   */
  exports.prototype['batch_size'] = undefined;
  /**
   * @member {Array.<Number>} n_epochs
   */
  exports.prototype['n_epochs'] = undefined;
  /**
   * @member {Boolean} use_tensorboard
   * @default true
   */
  exports.prototype['use_tensorboard'] = true;
  /**
   * @member {Boolean} verbose
   * @default true
   */
  exports.prototype['verbose'] = true;
  /**
   * @member {Array.<module:model/LearningRate>} learning_rate_dict
   */
  exports.prototype['learning_rate_dict'] = undefined;
  /**
   * @member {Array.<module:model/CostFunction>} cost_function_dict
   */
  exports.prototype['cost_function_dict'] = undefined;
  /**
   * @member {Array.<String>} optimizer
   */
  exports.prototype['optimizer'] = undefined;
  /**
   * @member {Array.<Number>} momentum
   */
  exports.prototype['momentum'] = undefined;
  /**
   * @member {Array.<module:model/RandomFunction>} random_weights_dict
   */
  exports.prototype['random_weights_dict'] = undefined;
  /**
   * @member {Array.<module:model/RandomFunction>} random_biases_dict
   */
  exports.prototype['random_biases_dict'] = undefined;
  /**
   * @member {String} session_saver_path
   * @default './save/'
   */
  exports.prototype['session_saver_path'] = './save/';
  /**
   * @member {Boolean} load_prev_session
   * @default false
   */
  exports.prototype['load_prev_session'] = false;
  /**
   * @member {Array.<Number>} session_save_duration
   */
  exports.prototype['session_save_duration'] = undefined;
  /**
   * @member {Array.<Number>} num_test_pictures
   */
  exports.prototype['num_test_pictures'] = undefined;



  return exports;
}));


