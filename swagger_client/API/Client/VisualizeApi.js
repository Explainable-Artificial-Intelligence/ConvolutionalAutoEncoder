/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.VisualizeApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * WebUI to build, train and tune a Convolutional Autoencoder
 * Version: 1.0.5
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.VisualizeApi');

goog.require('API.Client.ClusterParameters');
goog.require('API.Client.Clustering');
goog.require('API.Client.Image');
goog.require('API.Client.Point2D');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.VisualizeApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('VisualizeApiBasePath') ?
                   /** @type {!string} */ ($injector.get('VisualizeApiBasePath')) :
                   'http://localhost:8080/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('VisualizeApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('VisualizeApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.VisualizeApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * generates the AE output from a given point of the sample distribution
 * 
 * @param {!Point2D} point2D 2D Point of the sample distribution
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Image>}
 */
API.Client.VisualizeApi.prototype.generateImageFromSinglePoint = function(point2D, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/visualize/generateImageFromSinglePoint';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'point2D' is set
  if (!point2D) {
    throw new Error('Missing required parameter point2D when calling generateImageFromSinglePoint');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    data: point2D,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * returns the clustering of the latent representation of a hidden layer
 * 
 * @param {!string=} opt_algorithm determines the clutering algorithm
 * @param {!string=} opt_datasetName determines the dataset which should be clustered
 * @param {!string=} opt_dimensionReduction determines the algorithm for dim reduction
 * @param {!ClusterParameters=} opt_clusterParameters determines the clutering parameters
 * @param {!number=} opt_layer determines the hidden layer
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Clustering>}
 */
API.Client.VisualizeApi.prototype.getHiddenLayerLatentClustering = function(opt_algorithm, opt_datasetName, opt_dimensionReduction, opt_clusterParameters, opt_layer, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/visualize/getHiddenLayerLatentClustering';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_algorithm !== undefined) {
    queryParameters['algorithm'] = opt_algorithm;
  }

  if (opt_datasetName !== undefined) {
    queryParameters['dataset_name'] = opt_datasetName;
  }

  if (opt_dimensionReduction !== undefined) {
    queryParameters['dimension_reduction'] = opt_dimensionReduction;
  }

  if (opt_layer !== undefined) {
    queryParameters['layer'] = opt_layer;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
    data: opt_clusterParameters,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
