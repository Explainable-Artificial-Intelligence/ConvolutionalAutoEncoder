/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.LoadApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * WebUI to build, train and tune a Convolutional Autoencoder
 * Version: 1.0.5
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0
 * http://www.apache.org/licenses/LICENSE-2.0.html
 */

goog.provide('API.Client.LoadApi');

goog.require('API.Client.ImageData');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.LoadApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('LoadApiBasePath') ?
                   /** @type {!string} */ ($injector.get('LoadApiBasePath')) :
                   'http://localhost:8080/v2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('LoadApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('LoadApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.LoadApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * returns the next batch of input/output images
 * images are encoded as png byte strings
 * @param {!number=} opt_batchSize defines the number of return images
 * @param {!string=} opt_datasetname name for dataset on the server
 * @param {!string=} opt_sortBy defines the sorting of the input images
 * @param {!string=} opt_filter the values which should be filtered (whitelist)
 * @param {!boolean=} opt_output if true returns AE output Images instead of input Images
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ImageData>}
 */
API.Client.LoadApi.prototype.getImageBatch = function(opt_batchSize, opt_datasetname, opt_sortBy, opt_filter, opt_output, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/load/getImageBatch';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_batchSize !== undefined) {
    queryParameters['batch_size'] = opt_batchSize;
  }

  if (opt_datasetname !== undefined) {
    queryParameters['datasetname'] = opt_datasetname;
  }

  if (opt_sortBy !== undefined) {
    queryParameters['sort_by'] = opt_sortBy;
  }

  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  if (opt_output !== undefined) {
    queryParameters['output'] = opt_output;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * returns a single input/output image
 * images are encoded as png byte strings
 * @param {!number} id defines the id of the images
 * @param {!string=} opt_datasetname name for dataset on the server
 * @param {!string=} opt_sortBy defines the sorting of the input images
 * @param {!string=} opt_filter the values which should be filtered (whitelist)
 * @param {!boolean=} opt_output if true returns AE output Images instead of input Images
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ImageData>}
 */
API.Client.LoadApi.prototype.getImageById = function(id, opt_datasetname, opt_sortBy, opt_filter, opt_output, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/load/getImageById';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling getImageById');
  }
  if (id !== undefined) {
    queryParameters['id'] = id;
  }

  if (opt_datasetname !== undefined) {
    queryParameters['datasetname'] = opt_datasetname;
  }

  if (opt_sortBy !== undefined) {
    queryParameters['sort_by'] = opt_sortBy;
  }

  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  if (opt_output !== undefined) {
    queryParameters['output'] = opt_output;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * returns a subset of input/output images
 * images are encoded as png byte strings
 * @param {!number} startIdx name for dataset on the server
 * @param {!number} endIdx name for dataset on the server
 * @param {!string=} opt_datasetname name for dataset on the server
 * @param {!string=} opt_sortBy defines the sorting of the input images
 * @param {!string=} opt_filter the values which should be filtered (whitelist)
 * @param {!boolean=} opt_output if true returns AE output Images instead of input Images
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ImageData>}
 */
API.Client.LoadApi.prototype.getImages = function(startIdx, endIdx, opt_datasetname, opt_sortBy, opt_filter, opt_output, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/load/getImages';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'startIdx' is set
  if (!startIdx) {
    throw new Error('Missing required parameter startIdx when calling getImages');
  }
  // verify required parameter 'endIdx' is set
  if (!endIdx) {
    throw new Error('Missing required parameter endIdx when calling getImages');
  }
  if (startIdx !== undefined) {
    queryParameters['start_idx'] = startIdx;
  }

  if (endIdx !== undefined) {
    queryParameters['end_idx'] = endIdx;
  }

  if (opt_datasetname !== undefined) {
    queryParameters['datasetname'] = opt_datasetname;
  }

  if (opt_sortBy !== undefined) {
    queryParameters['sort_by'] = opt_sortBy;
  }

  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  if (opt_output !== undefined) {
    queryParameters['output'] = opt_output;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * returns the next batch of input/output images
 * images are encoded as png byte strings
 * @param {!number=} opt_batchSize defines the number of return images
 * @param {!string=} opt_datasetname name for dataset on the server
 * @param {!string=} opt_sortBy defines the sorting of the input images
 * @param {!string=} opt_filter the values which should be filtered (whitelist)
 * @param {!boolean=} opt_output if true returns AE output Images instead of input Images
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.ImageData>}
 */
API.Client.LoadApi.prototype.getRandomImages = function(opt_batchSize, opt_datasetname, opt_sortBy, opt_filter, opt_output, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/load/getRandomImages';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_batchSize !== undefined) {
    queryParameters['batch_size'] = opt_batchSize;
  }

  if (opt_datasetname !== undefined) {
    queryParameters['datasetname'] = opt_datasetname;
  }

  if (opt_sortBy !== undefined) {
    queryParameters['sort_by'] = opt_sortBy;
  }

  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  if (opt_output !== undefined) {
    queryParameters['output'] = opt_output;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Load a train/test data file
 * Load a data file in different data formats
 * @param {!string} filename 
 * @param {!string=} opt_datasetname name for dataset on the server
 * @param {!boolean=} opt_readLabels true to read labels
 * @param {!string=} opt_dataType determines the data format of the input file
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.LoadApi.prototype.loadFile = function(filename, opt_datasetname, opt_readLabels, opt_dataType, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/load/loadFile';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'filename' is set
  if (!filename) {
    throw new Error('Missing required parameter filename when calling loadFile');
  }
  if (filename !== undefined) {
    queryParameters['filename'] = filename;
  }

  if (opt_datasetname !== undefined) {
    queryParameters['datasetname'] = opt_datasetname;
  }

  if (opt_readLabels !== undefined) {
    queryParameters['read_labels'] = opt_readLabels;
  }

  if (opt_dataType !== undefined) {
    queryParameters['data_type'] = opt_dataType;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
